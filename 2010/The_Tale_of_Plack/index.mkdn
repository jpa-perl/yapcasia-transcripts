# The Tale of Plack

皆さん、お疲れさまです。夏は暑いんでジャケットは脱いじゃいましたけれど、さっきフェライト会議室の前にいたら、出入り口のほうが酒くさかったので、僕もついつい飲んでしまいました（笑）。2本しか飲んでいませんから（笑）。

![](http://30d.jp/img/yapcasia/2/907_large.jpg "(c) Japan Perl Association")

今日は何の話をしようかなと思っているんですが、まずは、今回ゲストという形で呼んでいただいたこと、スタッフの皆様、特に牧さん、それから櫛井さんはじめボランティアの皆さんに、最初に感謝の言葉を言いたいと思います。ありがとうございました（拍手）。

ちょっとだけ自己紹介をしますと、僕は4年前からサンフランシスコに住んでいます。今週の水曜日に帰ってきまして、来週また戻っちゃうんですが、まだビザで働いています。ちょうど今グリーンカードを取ろうとしていて、永久にではないにせよ、たぶんこれからもずっと住むんじゃないかと思っています。オンラインでももちろんできるんですけれども、こういう形で何回か日本に帰ってきて、日本のコミュニティの皆さんと一緒に話したり、実際に会ったりするのはすごく楽しいので、これからもそういう形で日本にいっぱい帰ってきたいと思っています。僕は[シックス・アパート](http://www.sixapart.jp)という会社で、typepad.comというブログのサイトでバックエンドのエンジニアリングを中心に、ソフトウエアエンジニアをしています。CPANとかgithubとかtwitterでは@miyagawa、miyagawaがないときはbulknewsというところにフォールバックするんですけれども、ほとんどmiyagawaです。

![](http://30d.jp/img/yapcasia/2/906_large.jpg "(c) Japan Perl Association")

ニュースで見た方は知っていらっしゃるかもしれないですけれど、アメリカのほうのシックス・アパートという会社がVideoEggという会社と合併して名前が変わりまして、SAY:、saymedia.comという会社になります。シックス・アパートという名前は個人的には気に入っていて、創業者2人の誕生日が6日離れていることがシックス・アパートという名前の由来なんです。日本のほうはシックス・アパートという名前が残るみたいで、それは良かったなと思うんですけれど、このSAY:という名前はなかなかいいなとも思っています。どうしてかというと、Perlのビルトイン関数の名前なんです。ロゴが「;」じゃなくて「:」なので、ラベルになっちゃうんですけれども、小文字だったら、あとセミコロンだったら、実行できると、$\_の中が…。ま、そんなことはどうでもいいんですが（笑）。

## Plack

今日は[Plack](https://metacpan.org/release/Plack)の後の話をします。Plackとは何ぞやというのを話す必要もないかなと思うぐらい、この1年で皆さんも急速に名前を聞いていると思います。一応簡単に説明しますと、Perlのウェブアプリケーションとサーバーの間のインターフェイスを採用する、仕様・インターフェイスがPSGIで、それを実装しているのがPlackです。PSGIもPlackもウィキペディアに載っています。前にPlaggerというソフトを書いたときは、スラッシュドットで「Plaggerなんてウィキペディアに却下されそうなソフトのことなんか知らない」みたいなコメントを書かれました。憤慨はしなかったんですけれども、PSGIとPlackは載っています。まぁ、だからなんだという話ではあるんですが。

![](http://30d.jp/img/yapcasia/2/1065_large.jpg "(c) Japan Perl Association")

PSGIはこういうものですね。すごく単純なPerlのサブルーチンリファレンスに$envというハッシュリファレンスが渡ってきて、そこから配列リファレンスでステータスコードやヘッダとボディを返します。今日のトークでコードが出てくるのは、これが最後です。これ以降はコードは出ないので、皆さんも安心してください（笑）。そうしないと多分眠いし、寝ちゃうと思うので、さらっと話したいと思います。

さっきもお話したんですけれど、去年の9月4日にPlackの開発を始めました。1年でだいぶ開発も進んだし、実際現場で使われていたり、あるいはいろんな既存のフレームワークが採用したりして、すごく浸透してきています。実際に今回のYAPCでも…タイトルをチラッと見ただけですけれど、かぶっているのもあるし、この赤の付いているのは、多分PSGIとかPlackに関係しているのではないかと思われるもので、これが1日目、これが2日目という感じで、だいぶ浸透が進んでいると思います。

僕はほかのYAPCにも行っているんですけれど、この間のピッツバーグのYAPCのときは、僕も含めて3つありました。そういう形で浸透が急速に進んでいるし、実際に今回のスポンサーになっているmixiとか、livedoorとか、モバゲーとか、Socialtextというアメリカのwikiの会社が使っています。あと、イギリスの国営放送BBCのサイトとか、カナダとアメリカの、昔twitterが使っていたNode.JSの開発者が今いるJoyentっていう会社でもPlackを使っていると聞いています。

## The Secret of My Success

どうしてPlackがうまくいっているのかなというのを自分なりに考えて、そこから深めた知見を、The Secret of My Successとして皆さんに紹介したいと思います。

箇条書きです。Random Thingsなんで、一応順番に紹介します。

![](http://30d.jp/img/yapcasia/2/909_large.jpg "(c) Japan Perl Association")

1番、“Good artists borrow, Great artists steal.”これは本当にピカソが言ったかどうかは怪しいらしいですけれど、ウィキペディアにありました（笑）。どういうことかというと、いろんなアイデアを得たらインスパイアして作るというのは、いいアーティストなら誰でもできるんだけれども、それよりもっとレベルが高いのは、あるものをそのまま盗んで模倣することだということなんですね。

僕はPlackとかPSGIをやる前に、tokuhiromとかYappoが作っていたHTTP::Engineを作っていました。これは同じくWSGIのRack、Python、Rubyのものにインスパイアされてはいましたが、既存のCatalystエンジンのコードベースを引きずって、そのまま使っていたところがかなりあったので、これが良くなかったところの1つだと思っています。つまり、既存のあるものを借りてきて、そのまま引きずられていることが多かったんですね。HTTP::Engineは別に悪いものじゃなかったんですけれども、盗むんだったらWSGIとかのRackをそのまま盗んじゃえばよかったのに、そこまでやらなかったというところが、多分、そこまでうまくいかなかった理由なんじゃないかなと思っています。

その記憶がありましたので、Plackは基本的にRubyのRackとかPythonのWebObをたどっています。Plack自身に含まれているモジュールが今は20とか30とかあります。モジュールというのは名前空間という意味ですが、名前空間も含めて、9割ぐらいはRackをほとんどそのままコピーしています。そこが良かったことかなと思います。

次は、今の項目に関連するんですけれど、WSGIのRackなどのサーバーの抽象化を何で2010年になってやっているのか、遅いよ、お前はという話なんですけれども。

AWSGIが出たのは2003年なんで、7年前なんですね。Rackのほうはわりと最近で、0.9が出たのは去年の8月で、ちょうどPlackを始める前なんですけれど、1.0が出たのが今年の1月とかだったかな。Rackのほうは、Ruby On RailsからSinatraにモーメンタムが移って分かれていくときに、ちょうどRackというものができたんで、そのタイミングという理由もあるんです。でもちょっと遅いし、今更Perlじゃんという感じなんですけれど、それでも悪いことばかりじゃなくて、遅く来るといろんなものが残っているんです（笑）。

要は鍋のパーティをしようと言って、11時半集合になったら、僕の場合はだいたい1時ぐらいに行くんです。11時半に行くと、買い出しに行って仕込みとかやらなくちゃいけないけど、1時ぐらいに行くと、いい感じに全部できていると（笑）。

始めるタイミングが遅かった分、WSGIとかRackのメーリングリストとか、ソースコードのレポジトリとかは、基本的に見れば全部分かる。彼らが何を失敗したかとか、どこがうまくいったかとか、何が人気があるか、何を実験したけれどあまり受け入れられていないかというのが全部分かります。

だから、困ったら、PythonとかRubyの人が何をやっているか見ればいいんで、非常に助かります。だからこそ、"Better late than never "- 「遅く来てもやらないよりまし」という言葉がありますけれど、それに付け加えて、早くやり過ぎるよりも遅いほうがかなりいいということも言えるんじゃないかなと思います。

それから3番目、これはJFDI.といって、ナイキの"Just Do It"という（コーポレートメッセージ）に、just "f'ing" do itというのを付けて、これはBest Practical, さっき"Perl Is Alive"のキーノートをやったJesseの会社のTシャツなんですけれども、ちょっと隠れちゃって見えないけれど、JFDI.。

今の流行り風に言うと、「やるしかない」ということです（笑）。

まあ、ぐだぐだ言わずにJFDIなんです。何かコードを書こうと思ったら、誰かの許可を得なくても書くことはできるわけです。少なくとも今の日本では、多分（笑）。

ウイルス作成罪というのがあるかどうかは自信がないから分からないけれど、そのはずなんです。だから、エディターを開いてコードを書いて、gitでコミットして、githubにプッシュしてとかすれば、誰でもやることができるわけですね。別に「今からコード書きたいんですけれどいいですか」と誰かの許可を得る必要はないわけです。

だから、僕らがPSGIとかPlackを始めたときは、まずIRCで1時間か2時間ぐらいチャットして、こんな感じでいいよねと決めたんです。僕はブログポストでドラフトを書いて、typepadでブログを書いて、これまでパブリッシュしないで寝て起きたらtokuhiromがレポジトリを作っていて、もう半分ぐらいできていました。そのときは名前は違ったんで、その後いろいろ変えたりもしたんですけれど、基本的にはこんな感じです。だから、別に僕の許可を得る必要もなく勝手にやればいいわけで、やりたければやればいいじゃん、許可を得ずにやった者勝ちなんじゃないのという。

これはときどき北朝鮮外交というんですけれど、瀬戸際外交（笑）。あまりいい例えじゃないんですけれど。コードの世界に行ったらもうやった者勝ち。もちろん、コミュニティの決まりとか、そういうのを完全に無視した形でやるのはいいと思わないですけれど、だからといって、ほかの人の許可を得てあまり空気を読みすぎてやるというのもどうかと思うんで、そういうやり方もいいんじゃないかとたまに思います。北朝鮮とJust Do Itと全然関係ないんで、よろしくお願いします（笑）。

はい、次。これも同じJesseの会社のTシャツなんですけれども、Shut the fuck up and write some code.。さっきのと同じですけれど、ぐだぐだしゃべっていないでコードを書くほうがいいよねということです。

これはgithubのグラフなんですけれど、去年の9月に始まった当時のコミットの数です。多分これは1週間単位かな？　1週間単位で、赤いのが僕、緑がtokuhiromで、黄色がYappoさんで、その下の緑は多分kazuhoさんかな、分からないけれど。大体一番多いのが最初なんですけれど、一番多いので書いているのが2万767行ですね。それは多分最初のPODのテンプレートとかも含めて全部書こうと思ったんですけれど。そんな感じでがりがり書いたんで、書こうと思ったらどんどん書く、しゃべっている暇があったら書いたほうがいいんじゃないかっていう感じですね。

5番目、これはPerlのモットーでもある、"There Is More Than One Way To Do It"、TIMTOWTDI。これ読みにくいんで、人は皆 Tim Toady と呼ぶんですよ。ラリー・ウォールのIRCとかtwitterとかでもgithubのニックネームをTim Toadyと言います。twitterでもたまにつぶやいたりしているんで、知らなかった方は調べてください。これらのモットーが彼の名前、ニックネームになっています。

最近もう1つ流行っているのがあって、"But Sometimes Consistency Is Not A Bad Thing Either"．。つまり、いろんなやり方があるのはいいんだけれど、時に共通のやり方があっても、それは悪いことではないよねという意味です。これまたBSCINABTEと読みにくいんで、Bicarbonateという、炭酸塩何とか（の単語を使っています）。これはスペルが全然違うんですけれど（笑）。

Tim Toady Bicarbonateというのが最近流行っていて、MooseとかMouseみたいに、オブジェクトのPerl5の方法っていろんなやり方があるんだけど、Mooseみたいなことで共通のやり方をすれば、いちいちオブジェクトシステムを引っ張るやり方よりもそっちのほうがいいなというコンテキストで使われることが多いんですけれど…。

これをPSGIの話に当てはめて考えると、PSGIというのは1つのやり方なんですよ。これは1つのunifiedなインターフェイス、統一インターフェイスで、ウェブアプリとフレームワークとサーバーが1つの決まったやり方です。PSGI以前は、こういうふうにいろんなフレームワークが上にあって、下にウェブサーバーがあって、間にCGI.pmがあったりなかったりで、mod\_perlのAPIを中で使う人がいたりとか、何かごちゃごちゃしていたのが、PSGIを挟むことによって、上にフレームワークをいっぱい持っておりますけれども、どの組み合わせでも全部PSGIが対応しているから、下のウェブサーバーはいろんなサーバーと組み合わせを走らせることができる。つまり、こういうふうに1個consistentなインターフェイスを作ることによって、さらにたくさんのウェブフレームワークやサーバーがどんどんもっと出てくると思います。

これもTIMTOWTDI（There is more than one way to do it.）な上に、さらにconsistentなPSGIを持つことができるんですね。今までカオスな組み合わせだったサーバーとフレームワークが、ユニファイのインターフェイスを1つ持つことによって、さらにもっといろんなやり方ができるようになったということで、そういう面白い時代かなと思っています。
次、これはUNIXの有名なKeep It Simple and Stupidという言葉ですけれど、PSGIってすごくばかみたいな仕様で、PerlのネイティブなデータストラクチャーであるCode ReferenceとかHash ReferenceとかArray Referenceしか使っていないんですね。始めた最初の何日かにやったのはこういうものなんですけれど、「何で$envがHash Referenceなんだ」と。そうじゃなくてAPIにして何かメソッドを生やしたほうがきれいじゃないかというふうに言ってくる人がいました。ここは一番分かっていないところで、やっぱりすごくシンプルなデータスクラクチャーでOOのAPIにしてしまうと、既存のインターフェイスに合わせるためのメソッドコールをまた読みかえなくちゃいけなくて、結局誰にとってもうれしくないということになってしまうわけなんですね。またこの話は後で出てきます。

![](http://30d.jp/img/yapcasia/2/914_large.jpg "(c) Japan Perl Association")

7番目、Perlというのは、たまにインターネットのglue language、glue言語だというようなことを言われるんですけれど、PSGIとは、Perlのフレームワークとサーバーのglue interfaceなんです。

glueというのは、のりということです。何でのりみたいなものを作るほうがいいのかという理由ですが、ウェブフレームワークにはいろんなものがあります。シンプルな軽量級のものから、フルスタックなものから、Catalystみたいなconfigでいろんなことができるものとか、さまざまなフレームワークがあって、その人たちみんながアグリーして、これがいいねと言うようなAPIを作るというのはすごく大変なんですよ。みんな違うんですね。

![](http://30d.jp/img/yapcasia/2/913_large.jpg "(c) Japan Perl Association")

みんな違うふうに考えるから、ある人はモジュールへの依存が全くなくて軽いのが好きだし、ある人はフルスタックでスケーラブルなものが好きだし、その中間もいます。だけど、HTTP::Engineというのは、HTTP::Engineの中にrequest/responseのAPIセットがあって、これは新しくフレームワークをつくる人においてはすごく便利なものなんですけれど、既存の人たちは、この新しいAPIと自分のフレームワークと既存のAPIを合わせるためにアダプターを書かなければいけないのが結構面倒くさかったりします。そこがHTTP::EngineとPlackのやり方、PSGIのやり方の違った点かなと思います。だから、PSGIって、すごく簡単なやり方ではあるんですけれど、これは本当にきれいなんかじゃないんです。

Hash ReferenceやArray Referenceを生で返すのは全然美しくないんですけれど、それを1つのインターフェイスにして、サーバーを書く人、フレームワークを書く人が、ちょっとした3行4行のglue codeを書いてやるほうがみんなが幸せになるんじゃないか、ということです。

8番目、最後なんですけれど、コンピューターサイエンスに望ましいことというのは2つあって、cache invalidationと名前を付けるということなんですね。ですから、Plackでは、僕が今までのCPANのやり方とちょっと違う名前の付け方をしていることが結構あります。

CPANのよくある大きなフレームワークになると、名前空間が長いことが多いです。コロンの数が多過ぎるだろうということなんですね。そうなると何が問題かというと、タイプするのがまず面倒くさい。オートコンプリートを使えというのはありますけれど、それは置いておきましょう。

タイプするのが面倒くさいということは、話すときも面倒くさいわけです。口頭で話すときも、IRCで話すときも面倒くさい。そうするとどういうことが起こるかというと、みんな書くのが面倒くさいから、省略して書くようになる。IRCではMooseX::MetaAttribute::Role::Meta::RoleというモジュールはみんなMXMARMRと書くようになるんです。でも読めないし、外から新しく来た人は何のことか分からなくなってしまいます。

だから、これを解決するためにRubyのやり方をパクってみました。

![](http://30d.jp/img/yapcasia/2/915_large.jpg "(c) Japan Perl Association")

Rubyの人たちって、ちょっと極端に言うと名前の付けかたがおかしくて、基本的に全部トップレベルのネームスペースなんです。例えばYAMLのパーサーはpsychという名前です。これはSyckから来ているんですけれど、結構面白いなと思っています。なので、サーバーとかフレームワークみたいなユーティリティーを作るときは、::がいっぱいあるような名前じゃなくて、できるだけトップレベルでいいんじゃないのと思っています。例えばStarmanの名前を普通に付けるとしたら、Net::Server::HTTP::Prefork::PSGIとなると長いし、書くのが面倒くさいということですね。Twiggyとか、Starletとか、他にもいっぱいあるので、こういうふうに名前を付けるのは結構大変な仕事ではあります。だけど、そういうふうに名前を付けることによって愛着も湧くし、口頭やIRC、twitterで話すときに、実際もっとリアルに違うものを使っているというイメージを持ちやすい名前を付けるのはすごく重要かなと思っています。

ということで、すごく適当にハッシュを並べてみました。まずはRubyとかPythonからいいものはどんどん盗んでくる。遅く来たらいろんなものが参考にできるし、ぐだぐだ言ってないでコードを書いて、できるだけシンプルなものを作って、みんなでそれをglueでつなげていく、そのときの名前付けは重要だということです。

## It's All About The People

8個のハッシュについて話してきましたけれど、それプラスもっとうまくいくために重要なことだと思っているのは「人」ですね。

Plackの開発には日本の人もかなりたくさん参加していましたし、他の国の人も参加していますけれど、そういう人たちと交流しています。これはサンフランシスコPerl Mongersで僕がプレゼンしたときのもので、これはロンドンに去年の12月に行って、Perlワークショップで話したときのものです。これもロンドンですね。あとは東京でhidekさんのところでhackathonしたときの写真もありますし、これは去年のYAPCでYuvalとかといろいろ話したりしていますし、これはViennaかな。実際にはViennaに行ったのはQAの仕事で、cpanmまわりの仕事で呼ばれて行ったんですけれど、真ん中の奥にいるのがAndreasというPAUSEのアップロードサーバーをやっている、すごくいい人ですね。これは…台湾のカフェでカンファレンスの前日にみんなでスライドを書いているところですね。鼎泰豐(ディンタイフォン) で料理を食べて、けいおん！けいおん！みたいな。

これは終わったあとのハッカソンでハックしたり、これはPerl casualかな。Perl casualの2回目か3回目ですね。これはポートランドのYAPC::NAです。今回も皆さんの中にいるかもしれないですけれど、既存の人たちが知り合いだけで固まっちゃって、初めて来た人がなかなか話せないですよね。そういう人たちのためのランチブレークみたいなものが2日目か3日目にあって、何回も来ているスピーカーの人と、あと初めての人だけが50人ぐらい、こうやって立食で話ができたのが、YAPC::NAは面白かったなと思います。これもコロンバス オハイオで。これはIngyで、今回は来られなかったんですけれど、OSCONで一緒のところに泊まったりしています。これはラリー・ウォール、OSCONです。これもOSCONですね。この右にいるのはTime BunceというDevel::NYTProfとかDBIの作者で、すごくいい人です。左にいるのは、一昨年来たMichael Schwern。ExtUtils::MakeMakerとか、Test::Moreとかを作っています。これは、一昨日ライブドアの人が集まった様子です。

この1年でロンドン、ピッツバーグ、オーランドとか、いろんなところへ行っています。今回のようにゲストとして呼ばれるときもあるし、自分で行ったり、会社に出してもらったりとか、いろいろありますけれど、そういうサポートがあって、いろんな人とチャットして、プレゼンして、ビール飲んで、Hackathonでコードを書いて、いろんなところでやってきています。

みんなに宮川のやっていることはすごく素晴らしいよと言ってもらっているんですけれども、そういう人たちの助けがあってできることだなと思っています。

みんな違う場所で違う仕事をして、違うことをしゃべっているし、海外から来ている人もいるけれど、今日ここに今日来ている皆さんはやっぱりPerlが好きで、Perlを楽しんで使っているというのが理由の1つだと思います。さっきのPSGIの話に似ているんですが、みんな違う考え方を持っていても、1つのPerlというglue languageを使う人が集まる場所が毎年あって、僕が5年前に始めたYAPCがこういうふうに年々大きくなっていくというのはすごく嬉しいなと思っています。

開催者はすごく大変で、僕は1回終わるたびに来年はやらないと思っていたんですが（笑）。今年は2年目で、そろそろバーンアウトするんじゃないかと思っているんですけど、そうなったとしたら、Jesseがやったようなサスティーナブルに開発・開催できるような仕組みをみんなで提案してやっていってほしいなと思っています。

また来年も、この場に来てお話をしたり、会ってhackathonをしたりできたらいいなと思っています。

ありがとうございました。（拍手）


