# The Tale of Plack

皆さん、お疲れさまです。ちょっと夏は暑いんで脱いじゃいましたけれど、さっきフェライト会議室の前に居たら、出入り口のほうが酒臭くて、僕もついつい飲んでしまいまして。（笑）２本しか飲んでいないんで。（笑）

![](http://30d.jp/img/yapcasia/2/907_large.jpg "(c) Japan Perl Association")

今日は何の話をしようかなと思って、今回ゲストという形で呼んでいただいて、スタッフの皆様、特に牧さん、それから櫛井さんはじめ、あとボランティアの皆さんに、最初に感謝の言葉を言いたいと思います。ありがとうございました。（拍手）

ちょっとだけ自己紹介をしますと、今サンフランシスコに住んでいまして、今週の水曜日に帰ってきまして、来週また帰っちゃうんですけれども、もう４年前に引っ越して、ずっと住んでいるんですが、まだビザで働いているんですけれど、今グリーンカードを取ろうとしていて、これからもずっと多分住むんじゃないか、まあ、永久には住まないと思うんですけれども、こういう形で何回か日本に帰ってきて、日本のコミュニティのの皆さんと一緒に話したり、オンラインでももちろんできるんですけれども、実際に会ってするのはすごい楽しいなと、これからもそういう形で日本にいっぱい帰ってきたいと思っていますけれども、[シックス・アパート](http://www.sixapart.jp)という会社でソフトウエアエンジニアをしています。typepad.comというブログのサイトでバックエンドのエンジニアリングを中心にやっています。CPANとかgithubとかtwitterでは、@miyagawa、miyagawaがないときはbulknewsというところにフォールバックするんですけれども、ほとんどmiyagawaです。

![](http://30d.jp/img/yapcasia/2/906_large.jpg "(c) Japan Perl Association")

ニュースで見た方は知っていらっしゃるかもしれないですけれど、アメリカのほうのシックス・アパートという会社がほかのVideoEggという会社と合併して名前が変わりまして、SAY:という、saymedia.comという会社になります。日本のほうはシックス・アパートという名前が残るみたいで、それは良かったなと思うんですけれど、シックス・アパートという名前は個人的には気に入っていて、創業者２人の誕生日が６日離れているので、それがシックス・アパートという名前なんですけれど。このSAY:という名前はなかなかいいなと思って。何でかというと、Perlのビルトイン関数の名前なんです。ロゴが「;」じゃなくて「:」なんで、ラベルになっちゃうんですけれども、小文字だったら、あとセミコロンだったら、実行できると、$\_の中が…。ま、そんなことはどうでもいいんですが。（笑）

## Plack

今日は[Plack](https://metacpan.org/release/Plack)の後の話をします。といっても、Plackとは何ぞやというのを話す必要もないかなと思うぐらい、この１年で皆さんも急速に名前を聞いていると思うんですけれども、一応簡単に説明しますと、perlのウェブアプリケーションとサーバーの間のインターフェイスを採用する、仕様が、インターフェイスがPSGIで、それを実装しているのがPlackなんですけれども、ウィキペディアにも載っています。PSGIも載っているし、Plackも載っています。前にPlaggerというソフトを書いたときは、スラッシュドットで、「Plaggerなんて、ウィキペディアに却下されそうなソフトのことなんか知らねえみたいなコメントを書かれまして、憤慨して…はなかったんですけれども、PSGIとPlackは載っていますので、まぁだからなんだという話ですが。

![](http://30d.jp/img/yapcasia/2/1065_large.jpg "(c) Japan Perl Association")

PSGIはこういうものですね。すごく単純なPerlのサブルーチンリファレンスに$envというハッシュリファレンスが渡ってきて、そこから配列リファレンスでステータスコードやヘッダとボディを返すと。今日のトークでコードが出てくるのは、これが最後です。これからコードは出ないんで、皆さんも安心してください。（笑）そうしないと多分眠いし、寝ちゃうと思うので、さらっと話したいと思います。

さっきも話したけれど、去年の９月の11日かな、僕の誕生日の前日だったと思うので、その１週間前にPlackの開発を始めました。もう１年でだいぶ開発も進んだし、浸透、使われている部分というのは、実際の現場で使われているとか、あるいはいろんな既存のフレームワークが採用したりというのがすごく進んできています。実際に今回のYAPCでも… これ多分、僕タイトルをチラッと見ただけなんで、実際に見たわけじゃないんですけれど、かぶっているのもあるし、この赤の付いているのは、これ多分PSGIとかPlackに関係しているのではないかと思われる、ないかもしれませんけれど、これ１日目、これ２日目という感じで、だいぶ浸透が進んでいると。

ほかのYAPCにも僕行っているんですけれど、そこでは… あ、この間ピッツバーグのときは３個ありました。僕も含めて。だから、そういう形で急速に進んでいるし、実際に今回のスポンサーになっているmixiとか、livedoorとか、モバゲーさんとか、あとSocialtextというアメリカのwikiの会社とか、あとBBCというイギリスの国営放送のサイトとか、Joyentっていうのはカナダとアメリカのとかの昔twitterとかが使っていたNode.JSの開発者が今居る会社ですけれど、そこでもPlackを使っていると聞いております。

## The Secret of My Success

何でPlackがうまくいっているのかなというのを自分なりに考えて、そこから知った知見というのを皆さんに紹介しようと。The Secret of My Successということで紹介したいと思います。

箇条書きです。Random Thingsなんで、一応順番に紹介しますけれども…

![](http://30d.jp/img/yapcasia/2/909_large.jpg "(c) Japan Perl Association")

１番、“Good artists borrow, Great artists steal.”これはピカソが言ったかどうかは怪しいらしいですけれど、ウィキペディアにありました。（笑）つまりどういうことかというと、まあ、いろんなアイデアを得たらインスパイアして作るというのは、いいアーティストなら誰でもできるんだけれども、それよりもっとすごいのは、あるものをそのまま盗んで模倣してしまうほうがもっとレベルが高いということなんですね。

PlackとかPSGIをやる前にHTTP::EngineというtokuhiromとかYappoとか（が作っていた）… 僕も参加していましたけれど、それを作っていました。これは同じくWSGIのRack、Python、Rubyのものにインスパイアされつつ、ただ、既存のCatalystエンジンのコードベースを引きずって、それをそのまま使っていたところがかなりあって、なので、これが一つ良くなかったところだと思っています。つまり、既存のあるものを借りてきてそのまま引きずられているのが多かった。盗むんだったら、もう盗んで、WSGIとかのRackをそのまま盗んじゃえばよかったのに、そこまでやらなかったというところが多分、HTTP::Engineは別に悪いものじゃなかったんですけれども、そこまでうまくいかなかった１点なんじゃないかなというふうに思っています。

なので、その記憶がありまして、Plackは基本的にRubyのRackとかPythonのWebObというのを基本的にたどっています。モジュールもほとんど、今Plack自身に含まれているモジュールが20とか30とかあるんですけれど、モジュールというのは名前空間という意味で、ほとんどそれの、９割ぐらいはほとんどRackをそのままコピーしています、名前空間も含めて。そういう感じで、そこが良かったことかなと思います。

次、今のに関連するんですけれど、結構こういうWSGIのRackとか、そういうサーバーの抽象化を何で2010年になってやっているのという、遅いよ、おまえはという話なんですけれども。

WSGIが出たのは2003年なんで７年前なんですね。Rackのほうは結構割と最近で、0.9が出たのは去年の８月で、ちょうどPlackを始める前なんですけれど、1.0が出たのがことしの１月とかだったかな？Rackのほうは、Ruby On RailsからSinatraに、何というか、モーメンタムが移っていく、分かれていくときにRackというものがちょうどできたんで、そのタイミングというのもあるんですけれども、ちょっと遅いし、今更Perlなんだけど、今更じゃんという感じなんですけれど、ま、結構それでも悪いところばかりじゃなくて、遅く来るといろんなものが残っているんです。（笑）

要は鍋のパーティをしようと言って、こういうふうに、11時半集合と言ったら、僕の場合は大体１時ぐらいに行くんです。大体11時半に行くと、買い出しに行って仕込みとかやって、大体１時ぐらいに行くと、いい感じに全部できていると。（笑）

なので、始めるタイミングが遅かった分、基本的にもうWSGIとかRackのメーリングリストとか、ソースコードのレポジトリとか見れば全部分かる。彼らが何を失敗したかとか、どこがうまくいったかとか、何が人気があるか、何を実験したけれどあまり受け入れられていないかというのが全部分かります。

なので、困ったら、PythonとかRubyの人が何をやっているか見ればいいんで、非常に助かります。だから、Better late than never - 遅く来てもやらないよりましという言葉がありますけれど、プラス早くやり過ぎるよりも遅いほうがかなりいいということも言えるんじゃないかなと思います。

それから、３番目、これはJFDI.というナイキの"Just Do It"というのに、just "f'ing" do itをというのを付けて、これはBest Practical, さっき"Perl Is Alive"のキーノートをやったJesseの会社のＴシャツなんですけれども、ちょっと隠れちゃって見えないけれど、JFDI.。

今はやり風に言うと、やるしかないと。（笑）

まあ、ぐだぐだ言わずにJFDIなんです。だから、もう誰かの許可を、何かコードを書こうと思ったら、誰かの許可を得なくても書くことはできるわけです、少なくとも今の日本では、多分。（笑）

わかんないけれど、ウイルス作成罪というのがあるかどうか、それは自信ないから分からないけれど、のはずなんです。だから、エディターを開いてコードを書いて、gitでコミットして、githubにプッシュしてとかすれば誰でもやることができるわけですね。別に今からコード書きたいんですけれどいいですかと誰かの許可を得る必要はないわけです。

だから、僕らがPSGIとかPlackを始めたのは、まずIRCで１時間２時間ぐらいチャットして、こんな感じでいいよねと。僕はブログポストでドラフトを書いて、typepadでブログ書いてですね、これまでパブリッシュしないで寝て起きたらtokuhiromがレポジトリを作っていて、半分ぐらいなんかもうできていたという。名前はそのときは違ったんで、その後いろいろ変えたりもしたんですけれど、基本的にはこんな感じで。だから、勝手にそうやって、別に僕の許可を得る必要もなく勝手にやればいいわけで、やりたければやればいいじゃんと、まあ、許可を得ずにやった者勝ちなんじゃないのという。

これは時々北朝鮮外交というんですけれど、瀬戸際外交。（笑）まあ、あまりいい例えじゃないんですけれど。コードの世界に行ったらもうやった者勝ち。ほかの人の許可を得るというのは、もちろん、コミュニティーの決まりとか、そういうのを完全に無視した形でやるのはいいと思わないですけれど、だからといってあまり空気を読みすぎてやるというのもどうかと思うんで、そういうやり方もいいんじゃないかとたまに思います。北朝鮮とJust Do Itと全然関係ないんで、よろしくお願いします。（笑）

はい、次。これも同じJesseの会社のＴシャツなんですけれども、Shut the fuck up and write some code.さっきのと同じですけれどね、ぐだぐだしゃべっていないでコードを書くほうがいいよねということです。

これgithubのグラフなんですけれど、これは去年の９月始まった当時のコミットの数。多分これ１週間単位かな？１週間単位なんで、赤いのが僕なんですけれど、緑がtokuhiromで、黄色がYappoさんで、その下の緑は多分kazuhoさんか、分からないけれど、大体一番多いのが一番最初なんですけれど、一番多いので２万767行ですね、書いているのが。それは多分最初のPODのテンプレートとかも含めて全部書こうと思ったんですけれど。そんな感じでもうがりがり書いたんで、もう書こうと思ったらどんどん書いて、しゃべっている暇があったら書いたほうがいいんじゃないかっていう感じですね。さっきと同じですけれど。

５番目、これperlのモットーでもある、"There Is More Than One Way To Do It"、TIMTOWTDI。これ読みにくいんで、人は皆 _Tim Toady_ と呼ぶんですよ。これラリー・ウォールのIRCとかtwitterとか、githubのニックネームをTim Toadyと言いますので、知らなかった方はtwitterでもたまにつぶやいたりしているんで、調べてください。これらのモットーが彼の名前、ニックネームになっています。

もう一個最近はやっているのがあって、"But Sometimes Consistency Is Not A Bad Thing Either"．

つまり、いろんなやり方があるのはいいんだけれど、時に共通のやり方があっても、それは悪いことではないよねという、これまたBSCINABTEと読みにくいんで、Bicarbonateという、炭酸塩何とか。これはスペルが全然違うんですけれど。（笑）

Tim Toady Bicarbonateというのが最近はやっていて、これ、よく使われるコンテキストは、MooseとかMouseとかみたいに、オブジェクトのPerl5の方法っていろんなやり方があるんだけど、Mooseみたいなことで共通のやり方をすれば、もうそれはいちいちオブジェクトシステムを引っ張るやり方をするよりもそっちのほうがいいなというコンテキストで使われることが多いんですけれど…

これをPSGIの話に当てはめて考えると、PSGIというのは一つのやり方なんですよ。これは一つのunifiedなインターフェイス、統一インターフェイスで、ウェブアプリとフレームワークとサーバーが一つの決まったやり方で、今までPSGI以前というのは、こういうふうにいろんなフレームワークが上にあって、下にウェブサーバーがあって、間にCGI.pmがあったりなかったりで、mod\_perlのAPIを中で使う人が居たりとか、何かごじゃごじゃしていたのが、PSGIを挟むことによって（上にフレームワークをいっぱい持っておりますけれども）下にウェブサーバー、いろんなサーバーと、どの組み合わせでも全部PSGIが対応しているから、組み合わせを走らせることができると。つまり、こういうふうに１個consistentなインターフェイスを作ることによって、さらにたくさんのウェブフレームワークだったり、サーバーがどんどんもっと出てくると。

これもTIMTOWTDI（There is more than one way to do it.）な上に、さらにconsistentなPSGIを持つことができる。今までカオスな組み合わせだったサーバーとフレームワークを１個ユニファイのインターフェイスを持つことによって、さらにもっといろんなやり方ができるようになったということで、そういう面白い（gen（neration）の？）時代かなと思っています。

次、これはUNIXの有名なKeep It Simple and Stupidというやつなんですけれど、PSGIの仕様って、すごくばかみたいな仕様で、PerlのネイティブなデータストラクチャーであるCode ReferenceとかHash ReferenceとかArray Referenceしか使っていないんですね。始めた当初の最初の何日かにやったのはこういうものなんですけれど、何で$envがHash Referenceなんだと、そうじゃなくてAPIにして何かメソッドを生やしたほうがきれいじゃないかというふうに言ってくる人が居て、ここは一番、何というかな、分かっていないところで、やっぱりすごくシンプルなデータスクラクチャーにすることによって、OOのAPIにしちゃうと、既存のインターフェイスに合わせるためのメソッドコールをまた読みかえなくちゃいけなくて、結局誰もうれしくないということになってしまうわけなんですね。またこの話は後で出てくるんですけれど。

![](http://30d.jp/img/yapcasia/2/914_large.jpg "(c) Japan Perl Association")

７番目、Perlというのは、たまにglue languageと言われますが、インターネットのglue言語みたいなことを言われるんですけれど、PSGIというのは、Perlのフレームワークとサーバーのglue interfaceなんです。

glueというのは、のりということです。つまり、何でのりみたいなものを作るほうがいいのかというと、ウェブフレームワークというのはいろんなものがあります。シンプルな軽量級のものから、フルスタックなものから、Catalystみたいなconfigでいろんなことができるものとか、いろんなフレームワークがあって、その人たちみんながアグリーして、これがいいねと言うようなAPIを作るというのはすごく大変なんですよ。みんな違うんですね。

![](http://30d.jp/img/yapcasia/2/913_large.jpg "(c) Japan Perl Association")

みんな違うふうに考えるから、ある人は、モジュールへの依存が全くなくて軽いのが好きだし、ある人は、フルスタックでスケーラブルなものが好きだし、その中間も居るし、みんな違うように考えるから。なんだけど、HTTP::Engineというのは、HTTP::Engineの中にrequest/responseのAPIセットがあって、これは新しくモジュールを、フレームワークをつくる人においてはすごく便利なものなんですけれど、既存の人たちがこの新しいAPIと自分のフレームワーク、既存のAPIを合わせるためにアダプターを書かなければいけなくて、これが結構面倒くさいということがあったりします。なので、そこがHTTP::EngineとPlackのやり方、PSGIのやり方の違った点かなと。だからPSGIって、すごくばかみたいな簡単なやり方なんですけれど、これは本当にきれいなんかじゃない。

Hash Referenceを生で返すとか、Array Reference生で返すとかというのは全然美しくないんですけれど、それを一つのインターフェイスにして、サーバーを書く人、フレームワークを書く人がちょっとしたglue codeを、３行４行のglue codeを書いてやるほうが、みんなが幸せになるんじゃないか、ということです。

８番目、最後なんですけれど、コンピューターサイエンスに望ましいことというのは２つあって、cache invalidationと名前を付けるということなんですね。これは僕、なので、Plackでは、今までのCPANのやり方とちょっと違う名前の付け方をしていることが結構あります。

CPANのよくあるというか、大きなフレームワークとかになると、名前空間が長いという。コロンの数が多過ぎるだろうということなんですね。で、そういうふうになると何が問題かというと、タイプするのがまず面倒くさい。オートコンプリートを使えよというのはありますけれどね。それは置いておいて。

タイプをするのが面倒くさいということは、話すときも面倒くさいわけです。口頭で話すときも、IRCで話すときも面倒くさい。そうするとどういうことが起こるかというと、みんな書くのが面倒くさいから、省略して書くようになる。IRCではMooseX::MetaAttribute::Role::Meta::RoleというモジュールはみんなMXMARMRと書くようになるんです。読めないし、外から新しく来た人は何のことか分からないと。

だから、これを解決するためにRubyのやり方をパクって（みました）。

![](http://30d.jp/img/yapcasia/2/915_large.jpg "(c) Japan Perl Association")

Rubyの人たちって、ちょっとなんか極端に言うと名前の付けかたがおかしくて、全部トップレベルのネームスペースなんです、基本的に。例えばYAMLのパーサーの名前がpsychという名前だったりとか、これはSyckから来ているんですけれど、結構面白いなと思って。なので、サーバーとかフレームワークみたいなユーティリティーを作るときは、できるだけ::がいっぱいあるような名前じゃなくて、トップレベルでいいんじゃないのと思って、例えばStarmanとか、普通に付けるとしたら、Net::Server::HTTP::Prefork::PSGIとか、長いし…

書くのが面倒くさいしということですね。Twiggyとか、Starletとか、いっぱいありますけれど。だから、こういうふうに名前を付けるのは結構大変な仕事ではあります。だけど、そういうふうに名前を付けることによってなんか愛着も湧くし、なんか使って、口頭で話すとき、IRCで話すとき、twitterで話すときに、すごく、なんか、その、物を使っているという、実際にもっとリアルになんか違うものを使っているというイメージが付きやすい名前を付けるのはすごく重要かなと思っています。

ということで… すごく適当にハッシュを並べてみましたけれど。だからRubyとかPythonから、いいものはどんどん盗んでくると。遅く来たらいろんなものが参考にできるし、ぐだぐだ言ってないでコードを書いて、できるだけシンプルなものを作って、みんなでそれをglueでつなげていくという、やっぱりそれで名前付けは重要だねということです。

## It's All About The People

時間が余っているかもしれないですけれども、8個言いましたけれど、それプラスもっとうまくいくために重要なことだと思っているのは… 人ですね。

Plackの開発に参加した、日本の人もかなりいっぱい参加していましたし、他の国の人参加していますけれど、そういう人たちと交流して、これはサンフランシスコPerl Mongersで僕がプレゼンしたときのものですけれども、これはロンドンに去年の12月に行って、Perlワークショップで話しして、これもロンドンの。あとは東京でhidekさんちでhackathonしたときの写真とか、これは去年のYAPCでYuvalとかといろいろ話したりとか、これはViennaかな。実際にはViennaに行ったのはQAの仕事で、cpanmまわりの仕事呼ばれて行ったんですけれど。これは真ん中の奥に居るのがAndreasというPAUSEのアップロードサーバーをやっている人。すごくいい人ですね。これは何だろう？これは台湾のカフェでカンファレンスの前日にみんなでスライドを書いている、そうですね、鼎泰豐(ディン タイ フォン) で料理食って、けいおん！けいおん！みたいな。

これは終わったあとのハッカソンでハックしたり、これはいつかな？Perl casualかな。Perl casualの2回目か3回目か。これはポートランドのYAPC::NAへ行って、YAPC::NAが面白かったのは、初めて来た人が、今回も皆さんの中に居るかもしれないですけれど、なかなか話す、既存の人たちが知り合いだけで固まっちゃって、なかなか話せないじゃないですか。そういう人たちのためのランチブレークみたいなものが２日目か３日目にあって、要は何回も来ているスピーカーの人と、あと初めての人だけ、だから50人ぐらいかな？こうやって立食で話しできるので、面白かったなと思います。これもコロンバス オハイオで。これ、Ingy 今回来れなかったんですけれど、OSCONで一緒のところに泊まったりとか、これはラリー・ウォール、OSCON。これもOSCONですね。この右に居るのはTime BunceというDevel::NYTProfとかDBIの作者、すごくいい人です。左に居るのは、一昨年来たMichael Schwern。ExtUtils::MakeMakerとか、Test::Moreとか。これ昨日、一昨日かなライブドアの人が集まって。

もうこの１年でロンドン、ピッツバーグ、オーランドとか、いろんなところへ行って、ゲストに呼ばれたら、今回みたいに行くときもあるし、自分で行ったりとか、会社で出してもらったりとか、いろいろありますけれど、そういうサポートがあって、いろんな人とチャットして、プレゼンして、ビール飲んで、Hackathonでコードを書いて、いろんなところでやってきて。

みんなに宮川・僕のやっていることはすごく素晴らしいよと言ってもらっているんですけれども、やっぱりみんなそういう人たちの助けがあってできることだなと思っていますので。

皆さんここに今日来ているのは、何で来ているかっていうことは、みんな違う場所から来て、違う仕事をして、違うことをしゃべったりとか、海外から来ている人、そうなんですけれど、やっぱりみんなPerlが好きで、Perlを使って楽しんでやっているというのが一つあるかなと。さっきのPSGIの話に似ているのが、みんな違う考え方を持っていても、一つのPerlというglue languageなんですけれど、そういう人が集まる場所がこうやって毎年あって、こういう５年前に僕が始めたんでこの（YAPCの）Ｔシャツを着ていますけれど、こういうふうに毎年毎年どんどん大きくなっていくというのはすごいうれしいなと思っています。

開催者の人はすごく大変だと思っていて、毎年終わるたびに来年はやらないと思っている僕の経験だったんですが（笑）、今年２年目なんで、そろそろバーンアウトするんじゃないかと思っているんで、まあ、そうだとしたら、Jesseがやったみたいに、そういうサスティーナブルに開発・開催できるような仕組みをみんなで提案してやっていってほしいなと思っています。

なので、また来年も、ここか、どこでもいいんですけれど、来て、お話をしたり、会って、hackathonをしたりとかできたらいいなと思っています。

ありがとうございました。（拍手）


