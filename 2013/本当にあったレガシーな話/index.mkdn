　こんにちは。牧と申します。今日は「本当にあったレガシーな話」というトークをさせていただきます。
　
　
　
　まずお詫びですが、ピンチヒッターとして話すので、スライドが突貫工事で大変申し訳ないです。外国のゲストが1人キャンセルになってしまったので、突然話すことになりまして。今日の話は、『モダンPerl入門』という本があるんですけど、かなりその中に書いてあるんで、今日の話がすっ飛ばしすぎだとかわからなかったところがあったりしたら、これを買って読んでいただけたらいいな、なーんて思います。
　
　
　というわけで、今日の本題です。ライブドアブログというサービスがありますね。日本最大のブログサービスで、かなり多機能で、サービス開始から10年経ちました。僕がこれに手を入れて使い始めたのは、1年は経ってなくて、だいたい10ヶ月くらい前なんですけど、僕も含めて20人から30人くらいのかなりの数のエンジニアがこのコードを触ってきていて、いろんなケースのコードが入り混じった状態です。これは推定22万行のPerlコードで書かれていて、mod_perl 1.3、Perl 5.8.8で動いていました。PV/UUは非公開だと思うんですけど、コードを書いてそのカジュアデレボルーしたりすると、かなり大変なPVとUUがあって、コンテンツは全て動的に吐き出しています。キャッシュを駆使して、あたかも普通にセーブファイルを読んでいるかのような感じでサクサクと動くようにしています。動的コンテンツは普通のプロキシアプリという感じの設定なんですけど、1日にだいたい1億リクエストくらいのアクセスがあります。サーバーもウン百台とあって、構成自体はわりと古風です。そんなにアグレッシブなことはされてない感じですね。では僕が何をしたかというと、これをガリガリ変えて、もっと開発しやすく、もっと運用しやすく、もっとモダンにというところをやってました。つまり、新機能の開発ではなくて、仕組みやそのあたりのアジャスト、動作を変えずに仕組みをガリガリ変えていた、というのが今日話す内容の枕です。
　
　
　はい。では、これをどうやってきたか。ミドルウェアを変えたらバッチリできたなんていう話をできたら嬉しかったんですけど、要は銀の弾丸は存在しないので、そうそううまくはいきません。逆に言うと、銀の弾丸1個で全部きれいになるわけはないんですが、ベストでなくてもベターなコードを適用していけば、意外とその辺の運用とかをよくすることは可能だなというのが実感でした。20万行というコードベースでも、そういうベターなコードを書くことによって、どんどんモダンなアプリに変えていくことは可能だということです。率直に言って、革新的なツールとか、このミドルウェアを使えば全部直るよとか、そういうことはこのトークでは一切出てきません。地道な努力の話です。
　
　
　で、今回やることですけど、先ほど話したことのおさらいですが、Perl5.88、mod_parl1.3xにべったりなコードでした。Makefile.PLは、少なくとも僕が見たときはなかったです。CPAN関係は6〜8年ぐらい前のバージョンを使っていて、何を処理しているかわからないコードがたくさんあって、絵に描いたような量っていう感じでした。よくよく見るとそこら辺に同僚がいるから、あんまり変なこと言えないんですが、そんな感じでした。
　
　
　僕がこういうふうに手をつけ始める前までは、エンジニア・スタッフの腕と力技でやってきたように見えます。このトークは、トークの性質上、「こういうことはしちゃだめなんだ」みたいな言い方を結構しますけど、実際このコードを触ってみると、レガシーとは言え、かなりいろいろ工夫されてて、なかなかいいシステムではあったんですね。ただ、このままずっと力技でやっていかなきゃいけないのかと思うとちょっとげんなりするなというコードでした。ですので、これからの目標として、その辺の実装をクリーンにして将来の発展につなげたいということでコードを書き始めています。
　
　
　具体的な目標ですが、まず僕がやれと言われたのは、Perlのバージョンを上げたいということです。5.8.8は、動いてる限りはいいんですけど、これから先何年も続けていくのに、このままバージョンを5.8から上げることができないと困ってしまうので、とりあえず上げたいということがありました。それに伴って、パッケージングも近代化してmod_perlとさよならしたかったですね。あとは、僕みたいにスポッと入ってきた人がアプリを立ち上げたときに、セットアップを全部手動でやるんではなくて、アプリを立ち上げたら勝手にセットアップされて動くみたいな形にしたいということ、またそれを含めて将来の変更の邪魔になるものはなるたけなくしていきたいなというのが、僕個人としての目標でした。要は、こういう19世紀的なところから現代的なものに変えたわけです。
　
　
　で、Perlアップグレードです。今回はまずこれをやりたかったんですけど、何せmod_perl1.3なので、Apacheのバージョンも固定だし、Perlのリブ（lib）とかもコンパイルするからそれも固定だし、結局全部1回PSGI化しないと、どうやってもバージョンを上げられないなあというのがわかって、これは先が長いなと思いました。なので、じゃあその前にとりあえず1回どういうシステムなのか見てみようかなと思ったわけです。みなさん、ライブドアブログは見たことありますか？ある人？ありますね。みなさんが見ているのは、この一番上の配信システムのところです。これが普通の一般ユーザーさんが一番見ているところですね。ここのところは生Apacheハンドラで書かれていたんですけど、みなさんの1リクエストはApacheハンドラで、リクエストに対するコンテンツはmod_perlで作っていました。そのほかにコメントやトラックバックを受け付けるシステムがあって、これはシーエストクシュウで、Sledge（スレッジ）で書かれています。CMSがあるんですけど、いわゆる「投稿する」もSledgeで書かれています。こういうふうにシステムが分割されているので、全部いっぺんにできるわけはないので、やっぱり一番簡単なのは配信システムのところかなあと判断しました。まず配信システムをmod_perlからひっぺがそうということですね。WAF、Sledgeで書かれているところよりは楽そうかなと思ったんで、そっちのほうに焦点を絞っていきました。
　
　
　さて、やるぞとコードを見ます。このコードは何をしてるの？仕様書は？ねえオザワさん、仕様書は？（客席から「ない」）仕様書がないなら、これが何をしてるか見たいからログは？　ちょっと待って。（客席から「いろんなとこに」）いろいろなとこね。そうそう。まあ、こういうことがあるんで。（FAIL）よく見ると、僕が一番憤慨したのはこれなんですが、わかりますか？warn（ワーン）がコメントアウトしてある。何だこれ？（ログ）はい、では本日一番重要なポイントです。これさえできればあとは何でもできます。ログを取ってください。ログを取ること。コメントアウトしているwarnは、ログじゃなくて濁点なんでやめてください。スイッチ一発でデバッグログが見たい。何をしてるか見たいんですね。スイッチ一発じゃないログ、例えばさっきのコメントアウトしてるみたいなやつとかだと、イットウ通していかないとデコードできないシステムだったらwarnをコメントアウトし忘れとか、ちょっと見たいときに毎回ソースコードを変えたりとか、やりたくないじゃないですか。いちいち変えてコメントを出すなんてみんなやりたくないはずだから、そしたら絶対ログなんか書かなくなるんです。だから、スイッチ一発でどうにかしたいんです。というわけで、当時Apacheハンドラを使っていたということもあって、Log::Minimal（ログ・ミニマル）っていうモジュールを値を上げようとしていろいろ書き始めました。
　
　
　ログの出力とかって、WAFとかを使ってると、WAFのコンテキストのところにログメソッドが入ってオブジェクト指向でやったりするんですけど、そんなことを組み込んでたら埒が明きません。ログ・ミニマルであれば関数をだだっと張ってすぐログが出せるので、そのほうがみんな簡単に使ってくれるだろうってことで、とにかくその方法でやってきました。あともう1つログを出すときに気をつけたかったのが、スイッチ一発で付けたり消したりできるようにすることですね。特に本番では最適化したいわけです。本番では、問題が起きたとき以外はログなんて要りません。なので、そもそもログのために使うコードを生かしておきたくないんです。例えばログのためにフォーマットした、フォーマットするためのコード、そういったものは見たくないわけです。あれを見るともっとひどくなりますから。ということで、そうするために定数畳み込みをうまく使ってやりたかったんです。定数型読み込みは、定数を作ってそれでいろいろ工夫するわけですけど、まず入力操作をする定数を作ります。定数を作ると何がいいかというと、定数をif文とかで囲むわけですね。そうするとあの定数の部分が処理される、まず最初に処理されるのがコンパイルケースで、その形状のときに定数を使った部分がそもそも使われなくて、ゼロなんです。レピー文のメンシブバップがゼロになる。if 文なんかは、全部消えたと同等になるんですね。存在しないわけです。実行されない。だから畳み込みが行われて、無駄な処理を一切しなくなる。なので、こういうif文の中にいろんな計算をしてデバッグ文を出したところで、本番ではこのフラグをオンにしない限りは、一切パフォーマンス等に影響を与えないんです。ですので、これをうまく使って、こういう形のデバッグをあちこちに散りばめることから始めました。
　
　
　こういう巨大なアプリケーションでは、面倒でも、ログは重要な分岐ごとに細かく仕込むべきですね。例えばこういうifのところとか、あまり面倒くさがらずにifごとに入れたりとか、この場合ifの条件は1つだけですけど、複数の条件をADNとかORとかでつなげたりするときも、どの条件がダメになるのか、状態を取り出したのかがわからないとデバッグするときに大変困るので、あまりそこを面倒くさがらずに1個1個ちゃんと丁寧にデバッグ部分に仕込んでいくと、あとあと幸せになれると思います。あとはメッセージですね。メッセージは、x=1とか書いても、このxがなんだかわからない。なので、xが1だと何か起こるのであれば、xが1なのでこの条件からは離脱しますとか、そういったことを書いておくとあとがとても楽です。ポイントを押さえるっていうのはそういうことですね。ただ、そういうのをいっぱい書くとまたログがごちゃごちゃしてくるんですが、僕がおすすめするのは、マーカーをつけることです。マーカーはこういう感じのSTARTとかENDとかがあって、「今◯◯をしてるよ」と入れて、そのセクションごとにログがグループ化されるように出せると大変いいなと思います。これは時間があったらゴガクやります。これを作るのにニテントランだとかいろいろコントロールするのは面倒なんですけど、ガードオブジェクトとかをうまく使うと、こういうきれいなログを吐き出すので、そのあたりを工夫すると、こういうスター系のマーカーをつけてコンテキストごとにログをブロックで固められるのでおすすめです。
　
　
　で、ここでやっとコードの実行結果を追えるようになります。自分の書いた変更がここで、新たにテンになりますなんていうのが、そういうややになったことがわかるので、ここまでは結構時間をかけました。ここを追えるようにするのが一番重要で、最初にすることだと思います。やっと実行結果を追えるようになったので、じゃあ今度はmod_perlをやりましょう。これ知ってますか？バベルの塔の絵なんですけど、mod_perlはバベルの塔ですよ。人類を不幸にします。これは、有名な詩ですけど、どれだけ嫌いか。まあいいや。で、とりあえずいろんなことをしているコードを眺めて、親子関係とかいろいろハンドラなんで考え直したりします。
　
　
　では、mod_perlでハンドラを書いたことがある人？生ハンドラを書いたことある人？あ、意外といないんですね。なるほど。mod_perlで生でハンドラを書くと、Apacheリクエストというものを使って、例えばpostのパラメーター、getとかpostのパラメーターなんかに、ホスト名だとかパス名だとか、そういったものをいろいろ取るんですね。mod_perlの教科書みたいな本を読んでも、そのときにはこの$r（アール）を使っていろんなことをするという説明が書いてあるので、やっぱりみんな$rに対して直接いろんなことをするコードを書くんですね。だけど、$r はもう邪悪です。$r は多機能すぎ。$rは死ぬべき。なので、もう$rはメソッド内に隠蔽して、ある引数として渡すだけ、という形にしたいんです。例えば$rを使っているのはこういうやつですけど、上のifに入ると、何か見つからなかったらヨンワリを返す、エルスに入ると200倍にして何かデータをプリントする、というふうなコードなんです。これ1個だけだったらいいんですけど、これがあちこちにあるんですよ。ナそのもの。もちろん、読めば何をしてるのかはわかるんですけど、例えば1ヶ所動作を変えたらほかも全部同じように直さなきゃいけないとかがいろいろ面倒なので、こういうふうに、もっとイノマティックに、ヨンワリを返すならノットファンドを作る、何かデータを返すんだったら、データだったらアウトプットを作れ、rはただ単にそれに対する引数として渡すっていう形で、まずガクガダッタイにしていきました。こうすることによって、ifに入ったらノットファンドっていうことがコードを見た瞬間に完全にわかるし、ノットファンドを処理したときに、例えば何か特殊なヘッダを入れ込みたいとかがあったら、全てのハンドラで同じことができるんで、このほうが絶対におすすめだと思っています。これをやりつつですね、今、これはクラスって書いてますけど、こういうハンドラって、これで定義されて、クラス名はリクエストに対して、子供のハンドラを呼ぶとというふうにしてるんですけど、そのクラス名で普通にオリエントっぽい感じで親子関係を作っていろいろできるので、関係をいろいろ見直しました。mod_perlハンドラってクラスベースなんですよ。実際にオリエントのインサツを作らないんですね。ですので、ソッチダとかをベタ書きに書いちゃったりとか、パッケージソークのグローバルに書いたりとかいろいろあるんで、その辺をとにかく全部親クラスに集約して、関数がスイッチオン／オフできるようにいろいろ変えました。これは、のちのちPlackベースにしたときにほぼ全部オブジェクトにするつもりだったので、オブジェクトを変更するためにこういういろんな仕組みづくりをしておいて、オブジェクトに変えるときにオブジェクトのアトリビュートとしてクラブとかを追って書いています。そうすることによって、オブジェクトショウの親子関係をうまく使って、コットをダイブ出すことができるはずです。
　
　
　こういうことをやった状態で、とりあえずmod_perlのままデプロイします。デプロイするときには、今まで話したログ周りの変更、クラス関係の変更をして、軽くテストをしてみたところ、ガーン、ということが起きます。これは正しいページで、これはこのままデグで指定したんですが、なぜかこのページが出ずに真っ白な404ページが出てしまいます。なんでだろう。これは長いので、読まなくていいです。要はハンドラの戻り値とレスポンスで返す404とかの正しいコンビネーション、その1個のコンビネーションがわからないとエラードキュメントが走らないというmod_perlのクソ仕様があって、この最後に書いた正解以外のパターンはダメなんです。でもわからないでしょ、これ。ステータス200ですよ。200なのに404を返さないとエラードキュメントにならないということの意味がわからない。で、ちょっと仕事場がバタバタしまして、僕はイージーな話をしました。ちなみにこれが僕のコミットメッセージです。そういうのをちょこちょこ直して、一応デファクタリングした言葉で1回デプロイをしました。実はここに至るまではブウミンのみなさんはご存知だと思いますが、いろいろなエラーもありましたけど、それはちょっと話が長くなるので触れません。
　
　
　その次のステップとして、mod_perlからいよいよPSGIに引き剥がします。まずApacheハンドラを、別にムーとかムーサする話じゃなくて、全部Perlの簡単なプレスサイド的に直していきます。Apacheリクエストを全部Plackリクエストにして、それを直して走らせ、直して走らせるという作業をどんどん繰り返します。あと、Ruby（ルビー）のKage（カゲ）っていうものがあるんですけど、そのポートを作って、リクエストが来たときに本番と今の開発版と両方にリクエストを出してその差分を出すっていうのをしばらく走らせて、何せコードを読んでもわからないから、僕が自分でどういう間違いをしているのか、結果が合っているかどうかをそれで見たりしました。だんだん動作がわかってきたあとは、それは使っておりません。だけど、最初のうちはすごく便利でした。
　
　
　で、どんどんPlackにしていって、ずいぶんいろいろやったんですけど、たぶんこの辺は昨日カゼブロさんが話しているんでパスします。mod_perlからPSGIにしたので、やっとWebサーバーとPerlが切り離せるんですね。なので、やっとここでPerlのバージョンを上げられるようになります。Perlのバージョンを上げるなら当然依存関係も全部作り直しなので、じゃあcpanfileで全部管理する、cpacfileを使うならcartonも使うでしょうということで、もう泥縄的に一気に近代化しました。やった当時はちょうどcpanfile1.6が出たころで、cartonが0.9なんとかでしたね。Cpanfileの依存関係は、ああいうふうに全部バージョンの絶対指定をして入れ込みました。carton今もまだ0.9ですけど、そのうち1.0に上げたいなと思っています。そうそう、メインファイルフィールドはなかったんですけど、依存関係はディレクトリに依存関係の一覧表があって、それを地道に手でコピーで追加確認してやりました。
　
　
　問題はCPANになってないモジュール、だいたい内製のモジュールですね。社内のあちこちからtarballを探して、システム運用のあるやつに、このヤブに入れたらしきモジュールのソースコードはどこですかって聞いて、そこでtarball見つけて、それをまたデフォシトにコミットし直して、手動でcpan aにして入れて、いろいろ変えるということです。これについては、微妙にインストール順があるんですね。例えばスレッチですね。クラストリーダー0.09の辺りなんですけど、0.09ってもう8年くらい前のPerlで、それをcpanfaileに記述しても、ほかのモジュールが最新版にさらに依存関係を入れてくるので、0.1オンのヤマみたいになって、そうすると困る。なので、クラス処理側にはほかの依存関係を全部入れたあとに使用できないということもありました。でもたぶん、僕は見てないんですけど、ミヤガワさんが新しいバージョンをシップイットしたはずなので、そうするとギットから入れ込むってことができるはずなので、もうこれで要らなくなるはずです。
　
　
　そういうのをいろいろ書いていて、よくよく考えたら、僕はもう開発版でPSGIバージョンを2ヶ月くらい触ってきたからセットアップは全然問題なかったんですけど、ひょっとして、同僚のみなさんは、僕がまっさらにこれを上書きするとみんな死ぬんじゃないかなと思ったんです。でも教えるのも大変だし、どうしようと思ったので、じゃあもうPSGIが動き始めたら今の依存関係とか全部入れるところを作っちゃえと考えて、全部やりました。依存関係のゴタゴタ全部を処理して、必要だったらMySQL5.いくつを入れて、BBPMySQLの4.なんとかを4.0のMySQLに対してインストールしようとするとifで引っかかるから、それにパッチを当て直すということを自動的にやるようにして、同僚のみなさんが入れるときにはもう何もしなくてもとりあえず動くように作業しました。
　
　
　それで、デプロイです。やっぱりいろいろ技術的に困ってると思うんですけど、数台だけ入れ替えたら、突然パフォーマンスが30％落ちたんですね。パフォーマンスが落ちたのならワーカー数を増やそうかなと思ったんですが、増やすとロードアベレージが上がっちゃうし、ロードアベレージが上がるとアラートが降ってきてしまったので、しょうがないからコードを読みました。そのサイギをした一方、スーパーエンジニアのカゼブロさんが、どこかでNYTプロフでプロファイリングをしている間に何か見つけたりしてくれるかもしれないという状態だったので、コードの側とパフォーマンス的な側面からと同時に検証できて、たぶん僕一人でやるよりは3倍くらい早かったです。
　
　
　実際にそれをやってみたら、Plackを全く使ったことがない人にはちょっとわからないかもしれないですけど、マウントってものがあって、最初は特定のパスに対してPSGIアプリをマウントするところを多用していたんです。それを見てみたら、どうもその数が多すぎるとパフォーマンスがどんどん落ちるようだということがわかったので、それを簡単なハッシュクルアップにしたらパフォーマンスが2倍以上になって、かなり速くなりました。このgistの中には実際に使ったベンチマークがあって、実際の数を検出しています。マウントはあまり使わないほうが速い。まあ●なんですけどね。あと、当時使っていたのはPlack･1.0018か1.0017だったんですけど、Plackリクエストに対して、Getリクエストがパラメーターを持ってくるメソッドがやたらと多いということがわかりました。どうしてかというと、このクエリーパラメーターを呼ぶごとにURLを2回パースして、そしてその結果をキャッシュしない。これじゃあしょうがない。ここをモンキーパッチして捉え直したら、やっぱり10％〜15％は速くなりました。これを、プルデンシカ、マージしてもらったので、1.0018以降ではもう大丈夫です。なので、今からみなさんがPlackを入れる場合はキンシャッキンです。あ、チェンジェスと名前を呼ぶのは私的で、みなさんはプルレックスと言います。
　
　
　さらにこの流れで、どうもパラメーターのデコーディングが遅いんじゃないかということが気になってきたので、Cでパラメーターをデコードしようということで、カッとなってTextQueryStringというのを書いたんですけど、名前がちょっと微妙なURL::Encode::XSのほうが速いし正しいということがわかったので、CPANに入れた瞬間に、作者が自分のURLを見てIRCでメッセージを送ってきたんですけど、よくよく見てみたらそっちのほうがよかったんで、そっちにしました。それを入れてモンキーパッチして、またさらに5％〜10％の性能改善を見ました。
　
　
　ということで、ここまでのまとめで言うと、実はApacheさんは偉かったんですね。mod_perlは偉かったんです。HTTPのリクエストのパースとか、そういうところはApacheは速かったんです。キミとの思い出は美しかった。で、これで、よくなったバージョンは全部デプロイしました。動いたんです。速くなりましたし。でもちょっと間違ったところがあるから細かい修正をして、デプロイして、弊社はデーモンツーを使ってるので、svc ?h でホットデプロイして入れ替えようとしたら、ロードアベレージがガーッと上がってきてしまうという状態になりました。これは何かと言うと、Server::Serverです。Server::Serverをコンパイルで使っている方は？いませんか？ あ、上にいらっしゃいますね。これはみなさん使うべきです。もしWebサーバーとかWebアプリの管理に、Webアプリ、PSGIアプリを使っているのであれば、Server::Serverを使うべきです。Server::Serverを軽くエッセンスすると、ホットデプロイさせるんです。ホットデプロイとは何かというと、アプリケーションがポートとかでリッスンしているとき、普通だったら1回落として立ち上げると、1回接続が切れるんですが、それを切れさせないようにしつつ、後ろのアプリケーションの世代を交代させるための仕組みです。ですので、ハップシグナルを送ると、まず新しい世代を1個作って、それがOKだったら前の世代を殺して新しい世代に入れ替えるという作業をします。それを使ってみたんですけど、そうしたら、前の世代を殺すタイミングと新しい世代が出てくるタイミングがほぼ同時なので、落ちるための衝撃のパワーと立ち上げるためのパワーが合わさって、いきなりロードアベレージが上がるという問題に出くわしたんですね。実は、これはカズホさんが2011年に書いていた既知の問題だったんです。じゃあどう直したかっていうと、このあたりについては、Server::Serverを使ったことがないっていう人はなんだかわからないと思うので、あとでぜひ僕の本を買ってください。もともとはこういうやり方でサーバーを立ち上げるねっていうシンプルなやり方で、ちょっと見えないかもしれないんですけど、スポンインターバル、あと上にあるシンアポハップっていう2つのオプションをつけることにしました。そうすることによってどういうことが起こるかというと、それまでは、まず新世代を立ち上げる、一気に旧世代を殺す、新世代は一気に立ち上がる、残りが立ち上がるとなっていたのを、新世代が立ち上がる、旧世代が落ちる、新世代が立ち上がる、旧世代が落ちるっていう、だんだん入れ替わっていくようになります。このスポンインターバルっていうのが、だんだん替わっていくインターバルなんです。こうすることによって、一気に処理が起こるんじゃなくて、ゆっくりサーバーを下げずにそれが落ちて、プロセスが入れ替わっていくのが見えるようになります。ウォッチAとかで見てると大変気持ちいいです。ぜひやってみることをおすすめします。これでやっと安心して再起動ができるということです。実はちょっと足りないんですけど、それはまたあとでお話します。やっと一安心できるようになりました。
　
　
　これで、配信面のみなさんが見ていたライブドアブログの記事の部分はPSGIされて、ひと通りきれいになりました。ところが、それだとまだ一部しか5.16.3じゃないし、まだ記事を書こうとするところは5.8で動いてるから、実際不安なわけです。5.8で、例えばソアブルでオブジェクトを作って、それを5.16.3で本当に読んでるのかな、あんまりテストしてないからどうしようと思ってドキドキしますけど。とにかく急いで次をやろうかなと思っていたら、Sledgeさんなんですね。Sledgeさんを触ったことある人？Sledgeさんを知ってる人？あ、知ってる。はい。僕は最後にSledgeを触ったのが2005年なんです。そのときは何を書いたかな。なんとかドアー検索とか、なんとかドアーデマートとか、そういうのを書いたと思うんですけど、とにかくそれぐらいの話です。実はSledgeにもSledge::PSGIっていうアダプターがあるので、PSGIですぐ動くはずなんです。動くはずなんだけれども、風の噂でちょっと遅いと聞きました。なので、Sledge::PSGI::Dispatcher::Propertiesだけ使って、後は自前で頑張りました。自分でPSGIハンドラを書いてやって、そっちもしました。で、Sledgeのリクエストって実はApacheリクエストを使ってるので、Sledgeさんを直すのには、それをPlackリクエストに入れ替えるんですね。入れ替えるのに、CPANにPlack::App::FakeApacheとかよさそうなものがあるなーって思ったんですけど、全然違うので、やっぱり自分でラッパを作って、その辺は我慢していただきました。これがチャンバリストのmod_perlです。
　
　
　mod_perlはすごいですよ。Apache->paramってやるとキーのリストを返すんですけど、ほかでこういうリクエストを通してこういう動作をするものってないんです。paramでアップロード名を使えるし、paramで代入もできるんです。CGI、CGIヘキーム。でもほかのやつは全然できません。アップロードメソッド、リストコンテキストとスカラーコンテキストでやってることが違うんですね。アップロードの名前を入れればキーが返ってくるけど、リストコンテキストでリストが出てくるし、いろいろもうよくわからない状態でした。独自関数もたくさんありますしね。なので、全部Plackリクエスト／レスポンスにプロキシして、うまくマッピングできない場合は力技でコヨウして、いろいろやりました。使い方がおかしいものもたまにあるので、ログを吐きまくって、「これを使うな」っていうログをあちこち吐くようにして、ほかの人のイイエに文句を書いておきました。あ、そうそう、mod_perlの中でcookieをやるのは間違ってます。cookieシンプルっていうやつで、mod_perlの中でやってるんですけど、これはグローバルのenvを使ってしまうんですよ。せっかく人がPSGIのenvにいろいろ入れてるのに、グローバルに入れてしまう。だからカラーなんですよね、僕に設定してないから。だから参照しようがないので、こういうコードをあちこちに書いてなんとかしています。あとエンブガードで、メソッドを書いてやはりワンアンしながら、ログを書き出しながら動作を直すっていうことをやりました。Sledgeさんは以上です。細かい修正はいくらでもあったんですけど、もと周りさんさえとり直せば意外と素直なフレームアウトで何とかやりました。
　
　
　さらに先へ。これは本を読んでる方はわかるんですけど、Server::Serverだと、再起動するときは、この黄色い部分を記憶して再起動するんですけど、要はこの80を50に変えたり、500を1000に変えたりとかしても、もう1回読み込んでくれるわけじゃないんですね。だからいつまで経っても同じ数を使うんですけど、それをどうにかするために、●なんですね。もう時間がないですね。あと？（事務局：1分半）そうですか、じゃあ回します。これは本を読んでください。
　
　
　そうそう、これ言ってきたんですけど、たぶんみなさんがやってると、1つのサーバーにいくつかのPSGIアプリを同居した場合が出てくると思うんですね。それが出てきたときには、ps|grepplackupだと、全部持ってくるわけです。どのアプリケーションがどれだかわかんないですから。だからみなさん、ぜひ$0を書いてください。これがプロセス名です。プロセス名をsprintfとか適当にポンと入れて、ハンドラのセッティングとかも入れると、psするときにきれいに見えます。あと同じように、psアプリの場合だとカスレ。リクエストURLとかHTTPホスト、こういったものをプロセス名に入れると、psしたときにどういうリクエストが書かれたかわかるので便利です。どのハンドラのクラスを見て、どのハンスウにやるかは、ここに例があります。
　
　
　野望としてはいろいろやりたいなと思っています。今のところはわりとDトレースとかを使って、アタッチすればデバッグ情報を全部入れてやりたいんですけど、これはまたそのうちやります。宣伝ばっかりしてごめんなさいね。この辺のことをもっと細かくちゃんと書籍に落としているので、もしこの初版を買われた方がいるのであれば、目次を見るとわかるんですけど、80％書き直していてほぼ新しい本なので、ぜひ目を通していただけると大変嬉しいです。




maki2013
YAPC：Asia Tokyo 2013におけるトーク。
本当にあったレガシーな話

00：00：00
牧：こんにちは。牧と申します。今日は「本当にあったレガシーな話」というトークをさせていただきます。はい、では早速。まずお詫びですが、ピンチヒッターでこれ話すんで、スライドが突貫工事で大変申し訳ないです。外国のゲストが1人キャンセル〓からしていたんで〓、いきなりなんです。
（モダンPerl入門）
　今日の話す話って、こういう本が出るんですけど、その中にかなり書いてあるんで、今日すっ飛ばしすぎたとか、分からなかったところあったら、これを買って読んだらいいな、なーんて思います。
（Livedoor Blog）
　というわけで、今日の本題ですけど。ライブドアブログというサービスがありまして、日本最大のブログサービスで、かなり多機能で、サービス開始から10年。僕がこれを使い始め、作ったのが、手を入れて使い始めたのは、だいたい1年は経ってなくて10ヶ月くらい前なんですけど、僕も含めてかなりの数のエンジニアが、たぶん20人だか30人だかぐらいがこのコードを触ってきていろいろ、いろんなケースのコードが〓入り混じった〓状態です。推定22万行のPerlコードで書かれてて、mod_perl 1.3、Perl 5.8.8、動いておりました。
　PV/UU非公開だと思うんですけど、ただまあコード書いてその〓カジュアデレボルー〓したりすると、かなりヒーとなるくらいの、ぐらいの〓PVとUUと〓あって、コンテンツは全て動的吐き出してます。キャッシュを駆使して、あたかも普通にセーブファイルを読んでるかのような感じでサクサクと動くようにしてます。動的コンテンツは普通のプロキシアプリという感じの設定なんですけど、動的コンテンツとかはだいたい1億リクエスト/日くらいのアクセスがあります。サーバーもン百台ありますね。構成自体はわりと古風です。そんなにアグレッシブなことはされてない感じですね。
　僕がこれを触り始めて何したっていうと、これをガリガリ変えて、もっと開発しやすく、もっと運用しやすく、もっとモダンにっていうところをやってました。つまり新機能の開発そういうことじゃなくて、わりと仕組みというかその辺の〓アジャスト〓。動作を変えずに仕組みをガリガリ変えるという形をしてました。というのが今日の話す内容の〓マクラ〓ですね。
（どう実現したのか）
　はい。これをどうやってきたか。ミドルウェアを変えたらバッチリできたとかっていう話をできたら嬉しかったんですけど、要は銀の弾丸は存在しないというのがまず簡単な話で、そうそううまくいきません。
　で、これで終了になっちゃうんですけど。逆に言うと、銀の弾丸1個で全部きれいになるわけないんですが、ベストでなくてもベターなコードとかを適用していけば、意外とその辺の運用だなんだとかを〓良くする〓ことは可能だなというのが実感でした。
　20万行というコードベースでも、そういうベターなコードを書くことによってどんどんモダンなアプリに変えていくことは可能と。
　正直、革新的なツールとか、このミドルウェア使えば全部直るよとか、そういうのはこのトークで一切出てきません。地道な努力の話です。
（コードベース）
　で、今回やることですけど、おさらいで、先ほども話したように、Perl 5.88、mod_parl 1.3xに、ベッタリなコード。Makefile.PL、僕が少なくとも見たときはなかったです。CPAN関係は6‾8年ぐらい前のバージョンを使ってて、処理何をやってるかわかんないコードがたくさんあって、絵に描いたような量っていう感じで、よくよく見るとそこら辺に同僚がいるからあんまり変なこと言えないな。はい。そんな感じでした。
（これまで-これから）
　これまで、僕がこういうふうに手つけ始める前までは、エンジニア・スタッフの腕と力業でやってきたっぽいように見えます。
00：05：00
　このトークは、トークの性質上、こういうことしちゃだめなんだみたいな言い方を結構しますけど、実際このコードを触ってみると、レガシーとは言えかなりいろんなすごい工夫がされてて、なかなかいいシステムではあったんですね。ただそれでもやっぱりこのままやっていくと、力業をずっと伝えていかなきゃいけないのかと思うとちょっとゲンナリするなというコードでした。なのでその辺の実装をクリーンにして将来の発展につなげたいなあというところがこれからの目標ということで、コードを書き始めてます。
（目標）
　具体的な目標を落とし込んでいくと、僕がやれと言われたのは、まずPerlのバージョンを上げたい。5.8.8はそれはそれでいいんですけど、動いてる限りはいいんですけど、これから先何年も続けていくのに、このまま5.8から上げることができないと困ってしまうというので、とりあえず上げたいと。パッケージングもそれに伴って近代化してmod_perlとさよならしたい。
　あとは、最後の2つは僕、言われた〓アサイン〓というよりは僕の目標なんですけど、ある程度僕みたいにスポッと入ってきた人がアプリを立ち上げたときに、セットアップを全部手動でやるんではなくて、アプリを立ち上げたら何か勝手にその辺がセットアップされて動くみたいな形にしたい。それを含めて将来の変更の邪魔になるものはなるたけなくしていきたいなというのが、僕としての目標でした。
　要はこういう19世紀的なところから、現代的なヤツに変えたわけですね。はい。
（Perlアップグレード）
　でまあ、Perlアップグレード。これをまず今回やりたかったんですけど、何せmod_perl 1.3なんで、Apacheのバージョンも固定だし、Perlの〓リブ（lib）〓とかもコンパイルするからそれも固定だし、結局全部PSGI化を1回しないとどうやってもこれはバージョンを上げられないなあというのがまず分かったので、これは先が長いなと。
　なので、とりあえずじゃあその前に1回どういうシステムなのか見てみようかなと。
（システム分割）
　皆さんが、ライブドアブログ見たことあります？ ある人？ ありますね。皆さん見てるところというのは、この一番上の配信システムのところです。これが普通に一般ユーザーさん、一番見てるところですね。ここのところは生Apacheハンドラで書かれてて、書かれてたんですけど、皆さんの1リクエス1リクエストはApacheハンドラでmod_perlなんかでリクエストに対するコンテンツを作ってました。
　それのほかにコメントとかトラックバックを受け付けるシステムがあって、これは〓シーエストクシュウ〓で、〓Sledge（スレッジ）〓で書かれています。
　CMSがあるんですけど、いわゆる〓投稿〓をする、もSledgeで書かれています。
　こういうふうにシステム分割されてるわけでどっかから、全部できるわけないんでどっかから始めたいので、やっぱり一番簡単なのは配信システムのところかなあと。
　まず配信システムをmod_perlからひっぺがそうと。WAF、Sledgeでされてるところよりは楽そうかなと思ったんで、そっちのほうに焦点を絞っていきました。
（Phase1：配信システムをPSGI化）
　さて、やるぞと。コードを見ます。このコード何してるの？ 仕様書は？ ねえ〓オザワ〓さん、仕様書は？ 
（客席から「ない」）
　仕様書ないなら、これ何してるか見たいからログは？ ちょっと待って。
（客席から「いろんなとこに」）
　いろいろなとこね。そうそうそう。まあ、〓こういうあれが〓あるんで。
（FAIL）
　くそ、よくこう見ると、僕が一番憤慨したのはこれで、分かります？ warn（ワーン）が〓コメントアウト〓してある。何だこれ？ あーっ。
（ログ）
　はい。本日一番重要なポイントです。これさえできればあとは何でもできます。ログを取ってください。ログを取れー。はい。コメントアウトしているwarnが、それログじゃなくて〓濁点〓なんで、やめてください。スイッチ一発でログが見たい。〓デバッグ〓ログが見たい。何してるか見たい。スイッチ一発じゃないログ、さっきのコメントアウトしてるみたいなやつとかだと、例えば〓イットウ〓通していかないとデコードできないシステムだったらwarn消し忘れとか、あ、warn消し忘れじゃない、warnをコメントアウトし忘れとか、ちょっと見たいときに毎回毎回ソースコードを変えたりとか、それをやりたくないじゃないですか。いちいちどこの〓ク〓を変えてコメント出すとかなんて、みんなやりたくないはずだから、そしたら絶対ログなんか書かなくなるんです。なんで、スイッチ一発でどうにかしたい。
00：10：10
　というわけで、当時Apacheハンドラを使っていたということもあって、Log::Minimal（ログ・ミニマル）っていうモジュールをとにかく〓チ〓を上げようということでいろいろ書き始めました。
　ログの出力とかって、よくWAFとか使ってるとWAFのコンテキストとかするところにログメソッドとか入ってオブジェクト指向でやったりするんですけど、そんなこと組み込んでたらラチが明かないんで、もうログ・ミニマルであれば、もう関数をだだっと張ってすぐログが出せるので、そのほうがみんな簡単に使ってくれるだろうしってことで、とにかくその方法でやってきました。
　あともう1つログを出すときに気をつけたかったのが、スイッチ一発で消したり付けたりですね。特に本番では最適化したいわけですよ。本番ではログなんて要らない。問題起きたときだ以外は。なので、そもそもログのために使うコードとかを生かしておきたくないわけです。例えばログのためにフォーマットした、フォーマットするためのコード、そういったことを見たくないわけです。あれを見ると〓もっとひどくなる〓。
　ということで、それをやるために〓定数畳み込み〓をうまく使ってやりたいということでした。はい。
　定数型読み込みは、まず定数を作ってそれでいろいろ工夫するわけですけど、まず〓入力〓操作をする定数をまず作ります。
　定数を作ると何がいいかというと、定数をif文とかで囲むわけですね。そうするとあの定数の部分が処理される、まず最初に処理されるのがコンパイルケースで、その〓形状〓のときに定数を使った部分がそもそも使われない、ゼロ。〓レピー文のメンシブバップ〓が、ゼロになる。if 文なんか全部消えたと同等になるんですね。存在しないわけです。実行されない。だから〓畳み込み〓が行なわれて無駄な処理を一切しなくなる。
　なので、こういうif 文の中にいろんな計算をして〓デバッグ文〓を出したところで、本番ではこのフラグをオンにしない限りは一切パフォーマンス等に影響を与えない。なので、これをうまく使って、こういう形のデバッグをあちこちに散りばめることから始めました。
　こういう巨大なアプリケーションでログは面倒でも重要な分岐ごとに細かく仕込むべきですね。例えばこういうifのところとか、あまり面号くさがらずにifごとにとか、入れたりとか。あとifにこの場合条件が1つだけですけど、複数の条件をADNとかORとかでつなげたりするとこあるじゃないですか。そういうのもどの条件がダメになるのか、状態を取り出したのかが分からないとデバッグするときに大変困るので、あまりそこを面倒くさがらずに1個1個ちゃんと丁寧にデバッグ〓部分〓とか仕込んでいくと、あとあと幸せになれると思います。
　あとメッセージですね。メッセージは、x=1とか書いてもこのxがなんだか分からない。なので、xが1だと何か起こるのであれば、xが1なのでこの条件からは離脱しますとか、そういったことを書いておくとあとあと大変幸せになります。ポイント押さえるっていうのはそういうことですね。
　そういうのをいっぱい書くとまたログがごちゃごちゃしてくるんで、僕のおススメなのはマーカーをつけると大変便利だと思うんですが。マーカーはこういう感じのSTARTとかENDとかあって、今何してるよって入れて、そのセクションごとにログがグループ化されるように出せると大変いいなと。
　あ、説明してない。残念。これは時間があったら〓ゴガク〓やります。これを作るのに〓ニテントラン〓だとかいろいろコントロールするの面倒くさいんですけど、〓ガードオブジェクト〓とかうまく使うと、こういうきれいなログを吐き出すやつなんで、その辺の工夫をすると、こういうスター系のマーカーをつけてコンテキストごとにログをブロックで固められるので大変おススメです。
00：14：55
　で、ここでやっと、やっとコードの実行結果を追える。なんでオレの書いた変更がここで、〓あらたにテン〓になりますなんていうのが、そういう〓やや〓になったことが分かるんで、ここまでは結構時間はかけました。ここを追えるようにするのが一番重要で、一番最初に〓すること〓だと思うんです。
　やっと実行結果を追えるようになって、じゃあ今度はmod_perlやりましょう。これ知ってますか。バベルの塔の絵なんですけど、mod_perlはバベルの塔ですよ。人類を不幸にします。
　これは、有名な詩ですけど、どれだけ嫌いか。まあいいや。
　でまあ、とりあえずいろんなことをしているコードを眺めて、親子関係とかいろいろハンドラなんで考え直したりして。やっぱりパッと見ていかにもまずいなと思ったのは。mod_perlでハンドラ書いたことある人。生ハンドラ書いたことある人。あ、意外といない。なるほど。
　mod_perlで生でハンドラを書くと、Apacheリクエストというものを使って、例えばpostのパラメーター、getとかpostのパラメーターなんかに、ホスト名だパス名だなんかそういったものをいろいろ取るんですね。mod_perlの教科書みたいな本とか読んでも、そのときにはこの$r（アール）を使っていろんなことをするという説明書いてあるんで、やっぱりみんな$rに対していろんなことを直接するコードを書くんですね。なので、理屈っていうか、何でそういう〓そうか〓分かんないんですけど、$r はもう邪悪です。$r は多機能すぎ。$r は死ぬべき。なので、$rはもうメソッド内に隠蔽して、ある引数として渡すだけ、という形にしたい。
　例えば$rを使っているのはこういうやつですけど、上のifに入ると、何か見つからなかったら〓ヨンワリ〓を返す。〓エルス〓に入ると200倍にして何か〓データ〓をプリントすると。いうふうなコードなんですけど。これ1個だけだったらいいんですけど、これがあちこちにあるんですよ。〓ナ〓そのもの。読めばもちろん何をしてるのか分かるんですけど、例えば1ヶ所動作を変えたらほかも全部同じように直さなきゃいけないとか。いろいろ面倒くさいんで、こういうふうに、もっとイノマティックに、ヨンワリ返すならノットファンド作ると。何かデータ返すんだったらアウトプットをデータだったら作れと。で、rはただ単にそれに対する引数として渡すっていう形で、まず〓ガクガダッタイ〓にしていきました。
　こうすることによって、ifに入ったらノットファンドっていうの、〓完全〓にコード見た瞬間に分かるし、ノットファンドを処理したときに、例えば何か特殊なヘッダを入れ込みたいとかあったら、全てのハンドラで同じことができるんで、このほうが絶対におススメだと思っていました。
　これをやりつつですね、あれ今、これ、クラスって書いてますけど、こういうハンドラってこれで定義されて、クラス名どんどんリクエストに対して、〓子供〓のハンドラを呼ぶとかしてるんですけど、そのクラス名で普通にオリエントっぽい感じで親子関係を作っていろいろできるんで、親子関係をいろいろ見直しました。
　mod_perlハンドラってクラスベースなんですよ。実際に〓オリエントのインサツ〓を作らないんですね。なので、〓ソッチダ〓とかがベタ書きに書いちゃったりとか、パッケージ〓ソーク〓のグローバルに書いたりとかいろいろあるんで、その辺をとにかく全部親クラスに集約して、関数がスイッチオン／オフできるようにして、いろいろ変えました。
　これ、のちのちPlackベースにしたときにだいたい全部オブジェクトにするつもりだったんで、オブジェクト変更するためにこういういろんな〓仕組み〓いっぱいしておいて、オブジェクトに変えるときにオブジェクトのアトリビュートとして〓クラブ〓とかを追って書いてます。それをすることによって、オブジェクト〓ショウ〓の親子関係をうまく使って、〓コット〓を〓ダイブ〓出すことができるはず。はい。
　こういうことをやった状態で、とりあえずmod_perlのままデプロイと。そのデプロイするときには、今まで話したログ周りの変更、クラス関係の変更をして、軽くテストとかをやって、やってみたところ、ガーン。
00：20：05
　これは正しいページなんですけど、これはこのまま〓デグ〓で指定したんですが、なぜかこのページが出ずに真っ白な404ページが出る。なんでだ。
　これ長いんで読まなくていいです。要はハンドラの戻り値とレスポンスで返す404とかの正しい〓コンビネーション〓、その1個のコンビネーション分からないとエラードキュメントが走らないというmod_perlのクソ仕様があって、この最後に書いた正解以外のパターンはダメなんです。でも分かんないでしょ、これ。ステータス200ですよ。200なのに404を返さないとエラードキュメントにならない。意味分からない。で、これで、そうですね、ちょっと仕事場がバタバタしまして、僕は〓イージーな話〓しました。ちなみにこれが僕のコミットメッセージです。
　でまあ、そういうのをちょこちょこ直したりして、一応デファクタリングした〓言葉〓で1回デプロイをしました。実はここに至るまでは〓ブウミン〓の皆さんご存知だと思いますがいろいろ細かい、細かくもないエラーもいろいろありましたけど、それはちょっと話が長いんで放っときます。
　その次のステップとして、mod_perlからいよいよPSGIに〓引き剥がし〓ます。まずApacheハンドラを全部Perlの簡単な、別に〓ムーとかムーサする〓話じゃなくて、ただのプレスサイド的に直していく。Apacheリクエストを全部Plackリクエストにして。で、それを直す走らせる、直す走らせるをどんどん繰り返すと。
　あと、Ruby（ルビー）のKage（カゲ）っていうヤツがあるんですけど、それのポートを作って、リクエストが来たときに本番と今の開発版と両方にリクエストを出してその差分を出すっていうのをしばらく走らせて、僕がどういう自分で間違いをしてるのかを、なにせコードを読んでも分からないから結果が合ってるかどうかをそれで見たりしました。最初のうちはそれを使ってましたけど、もうだんだん動作が分かってくれば、それは使っておりません。だけど最初のうちはすごく便利でした。
　でPlackにどんどんしていって、このへんのいろいろやるとか。ずいぶんいろいろやったんですけど、たぶんこの辺は昨日カゼブロさんが話してるんでパスして、やりました。
　mod_perlからPSGIにしたのでやっとWebサーバーとPerlが切り離せるんですね。なのでやっとここでPerlのバージョン上げられる。Perlのバージョン上げるなら当然依存関係も全部作り直しなので、じゃcpanfileで全部管理。cpacfile使うならcartonも使うでしょうということで、もう泥縄的に一気に近代化しました。
　やった当時はcpanfile 1.6がちょうど出たころで、cartonが0.9ナントカだったですね。全部cpanfileが依存関係はああいうふうにバージョン、絶対指定をして入れ込みました。carton今もまだ0.9ですけど、そのうち1.0に上げたいなと思っています。
　あ、そうそう、メインファイルフィールドはなかったんですけど、依存関係はディレクトリに依存関係の一覧表があって、それをシコシコシコシコ手でコピーで追加確認、追加確認、追加確認っていろいろやって、やりました。
　問題はCPANになってないモジュール、だいたい内製のモジュールですね。社内のあちこちからtarballを探して、システム運用の〓あるやつ〓に、このヤブに入れたらしきモジュールのソースコードどこですかって聞いて、そこでtarballみっけて、それをまた〓デフォシト〓にコミットし直して、手動でcpan aにして入れると、そういういろいろ変えると。
　微妙なインストール順あるんですね。例えば〓スレッチ〓ですかね。〓クラストリーダー〓0.09ですけど。なんかその辺りなんですけど、0.09ってもうホントに8年くらい前のPerlで、それをcpanfaileに記述してもほかのモジュールが、最新版をさらに依存関係を入れてくるので、〓0.1オンのヤマ〓みたく、そうすると困る。なので、〓クラス〓処理側にはほかの依存関係全部入れたあとに使用できない。とか。はい。
00：25：15
　でもたぶん、僕見てないんですけど、ミヤガワさんがなんか新しいバージョンをシップイットしたはずなんで、そうすると〓ギット〓から入れ込むってことできるはずなんで、もうこれで、要らないはず。
（セットアップ）
　そういうのをいろいろシコシコ書いてたら、よくよく考えたら、僕はもうPSGIバージョンを開発版でもう2ヵ月くらい触ってきたから全然セットアップ問題なかったんですけど、同僚の皆さんひょっとして、これ僕まっさらに〓上書き〓するとみんな死ぬんじゃないかなと思って。しかも教えるのもカッタルイし、どうしようと思ったので、じゃあもうPSGIが動き始めたら今の依存関係とか全部入れるの作っちゃえって、全部やりました。依存関係のゴタゴタ全部それを処理して、必要だったらMySQL 5.いくつ入れて、必要だったら、確か〓BBP〓 MySQLの4.ナントカを、そのとき5.1じゃなくて4.0のMySQLに対してインストールしようとするとif、ifで引っかかるから、それをパッチ当て直す、そういうのを自動的にやるようにして皆さんが、同僚の皆さんが入れるときにはもう何もしないでもとりあえず動くようにというようなことをしました。
（DEPLOY）
　で、デプロイですよ。当然。やっぱいろいろ技術困ってると思うんですけど、数台だけ入れ替えたらパフォーマンスが30％落ちてるんですね。〓突然〓。
　あやー、うー。
　まあパフォーマンスが落ちたのならワーカー上げようかな。ワーカー数増やそうかなと思って。増やすと〓ロードアベレージ〓が上がっちゃうしさ。上がるとアラートが降って来たしさ。しょうがないからコード読むかって。で、いいか。
　でまあその〓サイギ〓をした一方、スーパーエンジニアのカゼブロさんが、どっかでNYTプロフでプロファイリングをいろいろしてて、なんかいつの間にかいろいろ見つけたりしてくれるかもしれない。なので、同時にコードの側とパフォーマンス的な側面からと検証ができて、たぶん僕一人でやったよりは3倍くらい早かったです。
　それをやってみたら、Plackを全く使ったことがない人にはちょっと分かんないかもしれないですけど、マウントってものがあって、特定のパスに対してPSGIアプリをマウントするところ、それを最初多用してたんですね。それを見てみたらどうもその数が多すぎるとパフォーマンスがどんどん落ちるってことが分かったんで、いってみたら、簡単なハッシュクルアップにしたらパフォーマンスが2倍以上になって、お、速いわっていって。このgist、gistの中には実際に使ったベンチマークがあって、実際の数を検出しています。なので、マウントはあまり使わないほうが速い。まあ●なんですけどね。
　あと、当時使っていたのはPlack･1.0018だったんですが。ん？1.0017かな、とかだったんですけど、Plackリクエストに対してGetリクエストが、パラメーターを持って来るメソッドがやたらと多いということが分かって、なんでかというとURLを2回パースするんですね。このクエリーパラメーターを呼ぶごとに、そしてその結果をキャッシュしない。で、じゃあしょうがない。なので、モンキーパッチして〓捉え〓直したらやっぱり10％15％速くなった。
　これを、〓プルデンシカ〓、マージしてもらったんで、1.0018以降ではもう大丈夫です。なので、今から皆さんPlack入れる場合は〓キンシャッキン〓です。あ、〓チェンジェス〓名前呼ぶの私的な、皆さんは〓プルレックス〓と言います。
　で、この流れでさらに、どうもパラメーターのデコーディングが遅いんじゃないかというのが気になってきたので、Cでパラメーターをデコードしようということで、カッとなってText QueryStringというのを書いたんですけど、名前がちょっと微妙なURL::Encode::XSのほうが速いし正しいというのが分かったので、なんかCPANに入れた瞬間に、作者がオレの〓URLを見て〓IRCでメッセージを送ってきて、あ、スイマセンってなって、よくよく見てみたらそっちのほうが良かったんで、そっちにしました。
　それを入れてモンキーパッチして、またさらに5％から10％の性能改善を見ました。
00：29：45
（Apacheさんは偉かった）
　ということでここまでのまとめで言うと、実はApacheさんは偉かったんですね。mod_perlは偉かったんです。HTTPのリクエストのパースとか、そういうところはApache速かったんです。うん、そうそうそう。使えない。〓キミとの〓思い出は美しかった。
　で、これで、良くなったバージョン全部デプロイしました。良かったですね。
　動いたんです。速くなって。でもちょっと間違ったところあるから細かい修正して、デプロイして、弊社〓デーモンツー〓使ってるんで、svc ?h でホットデプロイして入れ替えようとしたら、〓ロードアベレージ〓がガーッと上がってきて、あーとか頭くるっていう状態になって。
　これ何かって言うとServer::Server。Server::Serverをコンパイルで使っている方。いないの？ あ、上にいる。皆さん使うべき。もしWebサーバーとかWebアプリの管理を、Webアプリ、PSGIアプリを使っているんであればServer::Server使うべき。
　Server::Server、じゃあ軽くエッセンスすると、ホットデプロイさせるんですね。ホットデプロイ何かって言うと、アプリケーションがポートとかでリッスンしてるのを、普通だったら1回落として立ち上げるところ、1回接続は切れますよね。それを切れさせないようにしつつ、後ろのアプリケーションの世代を交代させるための仕組みです。なのでハップシグナルを送ると、前の世代を、違う、まず新しい世代を1個作って、それがOKだったら前の世代を殺して新しい世代に入れ替えるという作業をします。
　それを使ってるんですけど、したら、まあ、前の世代を殺すタイミングと新しい世代が出てくるタイミングがほぼ同時なので、落ちるための衝撃のパワーと立ち上げるためのパワーが合わさって、いきなりロードアベレージが上がるという。そういう問題に出くわしたんですね。既知の問題だったんですけど、〓カズホ〓さんが2011年にそれについて書いてたんですね。読んだ。
　じゃあどう直したかって言うと。この辺、もしServer::Server使ったことないっていう人はなんだか分からないと思うのでぜひ僕の本をあとで買ってください。
　もともとこういう、何でしょうか。見たら、こういうやり方でサーバー立ち上げるねっていうシンプルなやり方なんですけど、これを、これちょっと見えないな。ここね、〓スポンインターバル〓、あと上にあるな、〓シンアポハップ〓っていう2つのオプションをつけることによってどういうことが起こるかというと、それまでは、まず新世代を立ち上げる、一気に旧世代を殺す、新世代は一気に立ち上がる、残りが立ち上がるっていうことをしたのを、新世代が立ち上がる、旧世代が落ちる、新世代が立ち上がる、旧世代が落ちるっていう、だんだんだんだん入れ替わっていることなんですね。このスポンインターバルっていうのがだんだん替わっていくインターバルなんです。
　これをすることによって一気に処理が起こるんじゃなくて、ゆっくりサーバーを下げずに〓それが落ちる〓。
　でこれで、プロセスが入れ替わっていくのが見える。ウォッチAとかで見てると、大変気持ちいいです。ぜひやってみることをおススメします。これでやっと安心して再起動ができると。でも実はちょっと足りないんですけど、それはまたあとでお話します。
　やっと、こう、ほっとひと安心。
（Phase3：Sledgeさん）
　これで配信面、皆さんが見ていたライブドアブログの記事の部分はひと通りPSGIされて、ひと通りきれいになりました。
　ところがそれだとまだ一部しか〓5.16.3〓じゃないし、まだ記事を書こうとするところ。5.8で動いてから実際不安なわけですよ。5.8で例えば〓ソアブル〓でオブジェクトを作ってそれを5.16.3でホントに読んでるのかな、あんまりテストしてないからどうしようと思ってドキドキしますけど。
　まあとにかく急いで、じゃ次やろうかなと思っていたらSledgeさんなんですね。Sledgeさんを触ったことある人。Sledgeさんを知ってる人。あ、知ってる。はい。
　僕最後にSledge触ったの2005年なんです。そのとき何書いたかな。なんか、なんとかドアー検索とか、なんとかドアー〓デマート〓とか、そういうの書いたと思うんですけど、とにかくそれぐらいの話です。
00：34：55
　Sledgeにも実はSledge::PSGIっていうアダプターがあるので、PSGIですぐ動くはずなんです。動くはずなんだけれども、風の噂でちょっと遅いと聞いた。（「チン」の音）おおっ。なので、頑張ってSledge::PSGI::Dispatcher::Propertiesだけ使って、後は自前で頑張りました。自分でPSGIハンドラを書いてやって、そっちもしました。
　じゃあパス。
　で、Sledgeさんを直すのに、Sledgeのリクエストとかって実はApacheリクエストを使ってるんで、それをPlackリクエストに入れ替えるんですね。入れ替えるのに、なんかCPANにPlack::App::FakeApacheとか良さそうなものがあるなーって思ったんですけど、全然違うんで、自分でやっぱりラッパを作ってその辺は〓我慢して〓いただきました。
　これがまた〓チャンバリスト〓のmod_perlです。コノヤロー。
　mod_perlすごいですよ。Apache->paramってやるとキーのリストを返すんですけど、ほかでこういうリクエストを通してこういう動作するものってないです。paramでアップロード名を使えるんです。paramで代入もできるんです。〓CGI、CGIヘキーム〓。でもほかのやつ、全然できない。
　アップロードメソッド、リストコンテキストとスカラーコンテキストでやってることが違う。アップロードの名前を入れればキーが返ってくるけど、スカラーコンテキスト、じゃない、リストコンテキストでなんかリストが出てくるし、いろいろもうよく分からない。
　独自関数たくさんあるしね。なので、全部Plackリクエスト／レスポンスにプロキシして、うまくマッピングできない場合は力業で〓コヨウ〓していろいろやりました。使い方がおかしいものもたまにあるんで、ログを吐きまくって、おまえこれを使うんじゃねえっていうログをあちこち吐くようにして、ほかの人に〓イイエ〓に文句を書いておきました。
　あ、そうそう、mod_perl、mod_perlの中で、cookieやる、あれ間違ってる。cookieシンプルだったかな。cookieシンプルっていうやつでmod_perlの中でやってるんですけど、こいつ、グローバルのenv使いやがるんですよ。せっかく人がPSGIにenvにいろいろ入れてるのにグローバルに入れやがる。だから〓カラー〓なんですよね、僕に設定してないから。うわーわー、グローバルで。
　だから〓参照〓しようがない。しょうがない。だから、こういうコードをあちこちに書いて、なんとかしてます。
　あとエンブガードって、これが今説明ないんですけど、メソッドを書いてやはり〓ワンアン〓しながら、お前こんなコード書いてんじゃねえぞ、クソがっていう、ログを書き出しながら動作を直すっていうことをやりました。
　Sledgeさんは以上です。
　細かい修正いくらでもあったんですけど、〓もと周りさん〓さえとり直せば意外と素直なフレームアウトで何とかやりました。
（さらに先へ）
　さらに先へ。
　これはね、本を読んでる方は分かるんですけど、Server::Serverだと、再起動するときにこの、これ全部を再起動、あ、この黄色い部分を記憶して、再起動と化するんですけど、要はこの80を50に変えたりとか、500を1000に変えたりとかしても、もう1回読み込んでくれるわけじゃないんですね。だからいつまで経っても同じ数を使うんですけど、それをどうにかするために、●なんですね。時間がもうないですね。あと？
事務局：1分半。
牧：あ、そうですか、じゃあ回します。これは本を読んでください。
　はいはいはい。あーそうそう。これ〓言ってきた〓んですけど、1つのサーバーにいくつかのPSGIアプリを同居した場合ってたぶん皆さんやってると出てくると思うんですね。それ出てたときには、ps | grep plackupだと、全部持って来るわけですよ。どのアプリケーションどれだか分かんないですから。だからみなさん、ぜひ$0を書いてください。これプロセス名です。プロセス名をsprintfとか適当にポンと入れて、ハンドラの〓セッティング〓とかも入れると、psするときにきれいに見えると。であと、同じように、psアプリの場合だと〓カスレ〓。リクエストURLとかHTTPホスト、こういったものをプロセス名に入れると、psしたときにどういうリクエストが書かれたか分かります。便利。
　ここにありますかね、例が。どのハンドラのクラスを見て、どの〓ハンスウ〓にやるかは。
（野望）
　一応野望としては、なんかいろいろやりたいなと思ってるんですけど、今のところわりとDトレースとか使って、アタッチすればデバッグ情報全部入れてやりたいんですけど、まあこれはまたそのうちやります。
　はい。ごめんなさいね、宣伝ばっかりして。この辺のことをもっと細かくちゃんと書籍に落として、もしこれを買っていただいた方が、初版を買われた方いるんであれば、これ目次見ると分かるんですけどほぼ80％書き直してます。なので、ほぼ新しい本なんでぜひ目を通していただけると大変嬉しいです。

00：40：15

